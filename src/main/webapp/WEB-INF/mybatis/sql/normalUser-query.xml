<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="normalUser">

	<!-- 수강현황 -->
    <select id="attendCourseList" parameterType="User" resultType="Course">
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
	           	CD.TEACHER_ID,
	           	(SELECT USER_NAME FROM USER WHERE USER_ID = CD.TEACHER_ID) TEACHER_NAME,
		       	C.REPORT_RATE,
		       	C.EXAM_RATE,
		       	C.DISCUSSION_RATE,
		       	C.PROGRESS_RATE,
		       	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
		        CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
		       	CD.H_PX,
		       	CD.V_PX,
		       	IF(CD.QG_ID = 0,'-',E.QUEST_YN) QUEST_YN,
		       	CD.QG_ID,
		       	IFNULL((SELECT EVAL FROM POSTSCRIPT WHERE COURSE_ID = CR.COURSE_ID AND USER_ID = CR.USER_ID),0) COURSE_EVAL,
		       	E.PROGRESS,
		       	IF(C.EXAM_RATE = 0,'-',E.EXAM_YN) EXAM_YN,
		       	E.TOTAL,
				CASE 	WHEN DATE_FORMAT(CURDATE(),'%Y-%m-%d') <![CDATA[<]]> CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END THEN
							DATEDIFF(DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END),
										DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END))
						ELSE
							DATEDIFF(DATE_ADD(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END,INTERVAL C.C_PERIOD DAY),CURDATE())
						END + 1 REMAIN_DAY,
				CASE 	WHEN C.TERM_YN = 'Y' THEN
							CASE WHEN C.STUDY_PERIOD_FROM <![CDATA[<=]]> DATE_FORMAT(CURDATE(),'%Y-%m-%d') AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') <![CDATA[<=]]> C.STUDY_PERIOD_TO THEN 'Y' ELSE 'N' END
						ELSE
							CASE WHEN DATE_FORMAT(CURDATE(),'%Y-%m-%d') <![CDATA[<=]]> DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') THEN 'Y' ELSE 'N' END
						END IS_STUDY,
				C.TERM_YN,
				C.C_PERIOD,
				C.COURSE_CODE,
		       	CASE WHEN IFNULL(C.MOBILE_YN, 'N') = 'Y' OR IFNULL(CM.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN,
                E.PROGRESS
				,IFNULL(E.QUEST_YN,'N') QUEST_YN
				,IFNULL(E.POSTSCRIPT_YN,'N') POSTSCRIPT_YN
				,C.QUEST_PROGRESS_RATIO
				,IFNULL(CD.QG_ID, 0) QG_ID
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_EVAL E ON CR.COURSE_ID = E.COURSE_ID AND CR.USER_ID = E.USER_ID
		WHERE 	CR.USER_ID = #{userId}
		AND 	CR.STATUS = 'A'
		AND		C.COMP_CD = #{compCd}
		AND 	DATE_FORMAT(CURDATE(),'%Y-%m-%d')
						BETWEEN 	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
						AND 		CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
		ORDER 	BY REMAIN_DAY, CD.COURSE_NAME 
    </select>

	<!-- 승인대기과목 -->
    <select id="waitingCourseList" parameterType="User" resultType="Course">
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
	           	CD.TEACHER_ID,
	           	(SELECT USER_NAME FROM USER WHERE USER_ID = CD.TEACHER_ID) TEACHER_NAME,
		       	C.REPORT_RATE,
		       	C.EXAM_RATE,
		       	C.DISCUSSION_RATE,
		       	C.PROGRESS_RATE,
		       	C.C_PERIOD,
		       	DATE_FORMAT(CR.CREATE_DATE,'%Y/%m/%d') CREATE_DATE,
		       	CR.COURSE_COST,
		       	CR.APPROVAL_ID
		       	,C.TERM_YN
		       	,IFNULL(C.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(C.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
                ,(SELECT COUNT(*) FROM COURSE_REGISTER WHERE APPROVAL_ID = CR.APPROVAL_ID) APPROVAL_CNT
		       	,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CURDATE(),'%Y-%m-%d') END C_FROM_DATE
		        ,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CURDATE(),INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE
		       	,CASE WHEN IFNULL(C.MOBILE_YN, 'N') = 'Y' OR IFNULL(CM.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
				,C.COURSE_CODE
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
		WHERE 	CR.USER_ID = #{userId}
		AND 	CR.STATUS = 'B'
		AND		C.COMP_CD = #{compCd}
		UNION	ALL
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
	           	CD.TEACHER_ID,
	           	(SELECT USER_NAME FROM USER WHERE USER_ID = CD.TEACHER_ID) TEACHER_NAME,
		       	C.REPORT_RATE,
		       	C.EXAM_RATE,
		       	C.DISCUSSION_RATE,
		       	C.PROGRESS_RATE,
		       	C.C_PERIOD,
		       	DATE_FORMAT(CR.CREATE_DATE,'%Y/%m/%d') CREATE_DATE,
		       	CR.COURSE_COST,
		       	CR.APPROVAL_ID
		       	,C.TERM_YN
		       	,IFNULL(C.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(C.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
                ,(SELECT COUNT(*) FROM COURSE_REGISTER WHERE APPROVAL_ID = CR.APPROVAL_ID) APPROVAL_CNT
		       	,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CURDATE(),'%Y-%m-%d') END C_FROM_DATE
		        ,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CURDATE(),INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE
		       	,CASE WHEN IFNULL(C.MOBILE_YN, 'N') = 'Y' OR IFNULL(CM.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
				,C.COURSE_CODE
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
		WHERE 	CR.USER_ID = #{userId}
		AND 	CR.STATUS = 'A'
		AND		C.COMP_CD = #{compCd}
		AND 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') <![CDATA[<]]> CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
		ORDER 	BY COURSE_NAME
    </select>

    <select id="cancelCourseList" parameterType="User" resultType="Course">
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
	           	CD.TEACHER_ID,
	           	(SELECT USER_NAME FROM USER WHERE USER_ID = CD.TEACHER_ID) TEACHER_NAME,
		       	C.REPORT_RATE,
		       	C.EXAM_RATE,
		       	C.DISCUSSION_RATE,
		       	C.PROGRESS_RATE,
		       	C.C_PERIOD,
		       	DATE_FORMAT(CR.CREATE_DATE,'%Y/%m/%d') CREATE_DATE,
		       	CR.COURSE_COST,
		       	CR.APPROVAL_ID
		       	,C.TERM_YN
		       	,IFNULL(C.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(C.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		WHERE 	CR.USER_ID = #{userId}
		AND 	CR.STATUS IN ('C','R')
		AND		C.COMP_CD = #{compCd}
		ORDER 	BY CD.COURSE_NAME
    </select>

	<!-- 수강내역 -->
    <select id="myCourseList" parameterType="User" resultType="Course">
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
	           	CD.TEACHER_ID,
	           	(SELECT USER_NAME FROM USER WHERE USER_ID = CD.TEACHER_ID) TEACHER_NAME,
		       	C.REPORT_RATE,
		       	C.EXAM_RATE,
		       	C.DISCUSSION_RATE,
		       	E.REPORT,
		       	E.EXAM,
		       	E.DISCUSSION,
		       	E.PROGRESS,
			    CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
			    CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
		        DATE_ADD(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END,
		        	INTERVAL C.AGAIN_STUDY_DAY DAY) AGAIN_STUDY_DAY,
		       	CASE 	WHEN DATE_ADD(DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END), INTERVAL C.AGAIN_STUDY_DAY DAY) <![CDATA[<=]]> CURDATE() THEN 'CLOSE'
		       			ELSE 'REVIEW' END MODE,
		       	(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'REG_STATUS' AND DD_KEY = CR.STATUS) STATUS_NAME,
		       	CD.H_PX,
		       	CD.V_PX,
		       	IF(CD.QG_ID = 0,'-',E.QUEST_YN) QUEST_YN,
		       	CD.QG_ID,
		       	IFNULL((SELECT EVAL FROM POSTSCRIPT WHERE COURSE_ID = CR.COURSE_ID AND USER_ID = CR.USER_ID),0) COURSE_EVAL,
		       	IF(C.EXAM_RATE = 0,'-',E.EXAM_YN) EXAM_YN,
		       	E.TOTAL,
		       	CR.STATUS
		       	,E.COMPLETE_YN
		       	,IFNULL(C.TERM_YN,'N') TERM_YN
		       	,C.C_PERIOD
		       	,IFNULL(C.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(C.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
		       	,CASE WHEN IFNULL(F.EVAL, 0) > 0 AND IFNULL(F.EVAL, 0) <![CDATA[<=]]> 0.5 THEN 'star_half'
					 WHEN IFNULL(F.EVAL, 0) > 0.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE1
                ,CASE WHEN IFNULL(F.EVAL, 0) > 1 AND IFNULL(F.EVAL, 0) <![CDATA[<=]]> 1.5 THEN 'star_half'
					 WHEN IFNULL(F.EVAL, 0) > 1.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE2
                ,CASE WHEN IFNULL(F.EVAL, 0) > 2 AND IFNULL(F.EVAL, 0) <![CDATA[<=]]> 2.5 THEN 'star_half'
					 WHEN IFNULL(F.EVAL, 0) > 2.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE3
                ,CASE WHEN IFNULL(F.EVAL, 0) > 3 AND IFNULL(F.EVAL, 0) <![CDATA[<=]]> 3.5 THEN 'star_half'
					 WHEN IFNULL(F.EVAL, 0) > 3.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE4
                ,CASE WHEN IFNULL(F.EVAL, 0) > 4 AND IFNULL(F.EVAL, 0) <![CDATA[<=]]> 4.5 THEN 'star_half'
					 WHEN IFNULL(F.EVAL, 0) > 4.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE5
		       	,CASE WHEN IFNULL(C.MOBILE_YN, 'N') = 'Y' OR IFNULL(CM.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
				,C.COURSE_CODE
				,IFNULL(QUEST_YN,'N') QUEST_YN
				,IFNULL(POSTSCRIPT_YN,'N') POSTSCRIPT_YN
				,IFNULL(CD.QG_ID, 0) QG_ID
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_EVAL E ON CR.COURSE_ID = E.COURSE_ID AND CR.USER_ID = E.USER_ID
                   LEFT OUTER JOIN POSTSCRIPT F ON CR.COURSE_ID = F.COURSE_ID AND CR.USER_ID = F.USER_ID
		WHERE 	CR.USER_ID = #{userId}
		AND 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') > CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
		AND		CR.STATUS = 'A'
		AND		C.COMP_CD = #{compCd}
		ORDER 	BY C_FROM_DATE DESC
    </select>

	<select id="interestCourseList" parameterType="User" resultType="Course">
		SELECT 	CC.COURSE_NAME,
		       	C.COURSE_ID,
		       	C.C_PERIOD,
		       	C.COURSE_COST
		       	,C.TERM_YN
		       	,IFNULL(C.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(C.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
		FROM 	USER_INTEREST_COURSE UIC
		           JOIN COURSE C ON C.COURSE_ID = UIC.COURSE_ID		 
		           JOIN COURSE_CODE CC ON CC.COURSE_CODE = C.COURSE_CODE
		WHERE 	UIC.USER_ID = #{userId}
		ORDER 	BY CC.COURSE_NAME
    </select>

	<select id="courseData" parameterType="User" resultType="Course">
	<![CDATA[ 
		SELECT A.COURSE_ID
		       ,A.COURSE_CODE
		       ,B.COURSE_NAME
		       ,A.TUTOR_ID
		       ,C.USER_NAME TUTOR_NAME
		       ,A.CHASU
		       ,A.C_STATUS STATUS
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'COURSE_STATUS' AND DD_KEY = A.C_STATUS) STATUS_NAME
		       ,E.LEARING_GOAL
		       ,E.LEARING_CONTENT
		       ,E.EVAL_METHOD
		       ,E.LEARING_TARGET
		       ,E.LEARING_COST
		       ,E.COURSE_COST
		       ,A.REPORT_RATE
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'EVAL_RATE' AND DD_KEY = A.REPORT_RATE) REPORT_RATE_NAME
		       ,A.EXAM_RATE
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'EVAL_RATE' AND DD_KEY = A.EXAM_RATE) EXAM_RATE_NAME
		       ,A.DISCUSSION_RATE
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'EVAL_RATE' AND DD_KEY = A.DISCUSSION_RATE) DISCUSSION_RATE_NAME
		       ,A.PROGRESS_RATE
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'EVAL_RATE' AND DD_KEY = A.PROGRESS_RATE) PROGRESS_RATE_NAME
		       ,A.C_FROM_DATE
		       ,A.C_TO_DATE
		       ,D.STATUS REGISTER_STATUS
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'REG_STATUS' AND DD_KEY = D.STATUS) REGISTER_STATUS_NAME
		       ,IF(D.COURSE_ID IS NULL,'N','Y') IS_REGISTER
		       ,IF(NOW() > C_FROM_DATE AND NOW() < C_TO_DATE,'Y','N') IS_EDUCATION_DATE
		  FROM COURSE A LEFT JOIN (SELECT * FROM COURSE_REGISTER WHERE USER_ID = #{userId}) AS D ON (A.COURSE_ID = D.COURSE_ID)
		                               LEFT JOIN COURSE_CODE AS B ON (A.COURSE_CODE = B.COURSE_CODE )
		                               LEFT JOIN USER AS C ON (A.TUTOR_ID = C.USER_ID)
		                               JOIN COURSE_MASTER E ON A.COURSE_CODE = E.COURSE_CODE
		 WHERE A.COURSE_ID = #{courseId}
	]]> 
    </select>
    
    
    <!--수강과정 사용자 정보  -->
    <select id="userInfo" parameterType="User" resultType="User">
		SELECT USER_NAME
		       ,MOBILE
		       ,EMAIL
		       ,(SELECT COUNT(*) FROM COUNSEL WHERE USER_ID = A.USER_ID) COUNSEL_CNT
		  FROM USER A
		 WHERE USER_ID = #{userId}
    </select>

    <select id="courseRegCancel" parameterType="User">
		UPDATE COURSE_REGISTER
		   SET STATUS = 'C',  
		       CONFIRM_DATE = CURRENT_TIMESTAMP,
		       UPDATE_DATE = CURRENT_TIMESTAMP,
	           UPDATE_USER = #{updateUser}
		 WHERE USER_ID = #{userId}
		   AND APPROVAL_ID = #{approvalId}
    </select>

    <select id="courseApprovalRegCancel" parameterType="User">
		UPDATE APPROVAL
		   SET STATUS = 'C',  
		       UPDATE_DATE = CURRENT_TIMESTAMP,
	           UPDATE_USER = #{updateUser}
		 WHERE APPROVAL_ID = #{approvalId}
    </select>


</mapper>