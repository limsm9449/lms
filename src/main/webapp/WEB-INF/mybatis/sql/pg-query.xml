<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="pg">
	
	<!-- 결재할 과정 리스트 -->
	<select id="applicationCourseList" resultType="Course">
	/* pg.applicationCourseList */
	SELECT D.CATEGORY_NAME
	       ,A.COURSE_ID
	       ,B.COURSE_NAME
	       ,A.COURSE_COST
	       ,IFNULL(A.COURSE_ORG_COST, A.COURSE_COST) COURSE_ORG_COST
	       ,A.COURSE_CODE
	       ,DATE_FORMAT(CURDATE(),'%y.%m.%d') C_FROM_DATE
	       ,DATE_FORMAT(DATE_ADD(CURDATE(),INTERVAL A.C_PERIOD DAY),'%y.%m.%d') C_TO_DATE
	       ,A.C_PERIOD C_PERIOD
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		                LEFT OUTER JOIN (
							   SELECT C3.CODE C3_CODE,
								  C2.CODE C2_CODE,
								  C1.CODE C1_CODE,
								  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
								 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
	 WHERE A.COURSE_ID IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select>

	<!-- 결재할 과정의 주차 리스트 -->
	<select id="applicationCourseWeekList" resultType="Course">
	SELECT C.WEEK,
	       C.TITLE,
	       C.WEEK_COST
	  FROM COURSE A LEFT OUTER JOIN COURSE_RESOURCE C ON C.COURSE_CODE = A.COURSE_CODE 
	 WHERE A.COURSE_ID = #{courseId}
	   AND C.WEEK IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select>
	
	<select id="courseResourceData" parameterType="Pg" resultType="CourseResource">
	SELECT WEEK,
	       TITLE,
	       WEEK_COST
	  FROM COURSE_RESOURCE 
	 WHERE COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId}) 
	</select>

	<select id="rejectCourseRegisterDel" parameterType="Pg">
	DELETE FROM COURSE_REGISTER
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>

	<select id="rejectCourseEvalDel" parameterType="Pg">
	DELETE FROM COURSE_EVAL
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>

	<select id="rejectCourseWeekDel" parameterType="Pg">
	DELETE FROM COURSE_WEEK
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>
	
	<select id="courseRegisterIns" parameterType="Pg">
	INSERT INTO COURSE_REGISTER(COURSE_ID,USER_ID,STATUS,COURSE_COST,APPROVAL_ID,CONFIRM_DATE,CREATE_DATE,CREATE_USER)
	SELECT A.COURSE_ID, 
	       #{userId},
	       if(#{paymentCost} = '0','A',if(#{paymentKind} = 'CASH','B','A')), 
	       A.COURSE_COST,
	       #{approvalId},
	       if(#{paymentCost} = '0',CURRENT_TIMESTAMP,if(#{paymentKind} = 'CASH',NULL,CURRENT_TIMESTAMP)),
	       CURRENT_TIMESTAMP,
	       #{createUser}
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	 WHERE COURSE_ID = #{courseId}	
	 </select>

	<select id="approvalIns" parameterType="Pg">
	INSERT INTO APPROVAL(APPROVAL_ID,USER_ID,STATUS,TOTAL_COST,PAYMENT_POINT,PAYMENT_COST,PAYMENT_KIND,PAYMENT_BANK,PAYMENT_DATE,CREATE_DATE,CREATE_USER, PAY_APPROVAL_ID)
	VALUES(#{approvalId},#{userId},if(#{paymentCost} = '0','A',if(#{paymentKind} = 'CASH','B','A')),#{totalCost},#{paymentPoint},#{paymentCost},#{paymentKind},#{paymentBank},CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,#{createUser}, #{payApprovalId})   
	</select>	

	<select id="courseEvalIns" parameterType="Pg">
	INSERT INTO COURSE_EVAL(COURSE_ID,USER_ID,TUTOR_ID,REPORT,EXAM,DISCUSSION,PROGRESS,TOTAL,LAST_WEEK,LAST_PAGE,REPORT_SEQ,CREATE_DATE,CREATE_USER,EXAM_WEEK,EXAM_TOTAL)
	VALUES (#{courseId},#{userId},#{tutorId},0,0,0,0,0,1,1,#{reportSeq},CURRENT_TIMESTAMP,#{createUser},0,0)
	</select>
	
	<select id="courseWeekIns" parameterType="Pg">
	INSERT INTO COURSE_WEEK(COURSE_ID,USER_ID,WEEK,PROGRESS_RATE,STUDY_START,STUDY_END)
	SELECT #{courseId},#{userId},WEEK,0,NULL,NULL
	  FROM COURSE_RESOURCE
	 WHERE COURSE_CODE = ( SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId} ) 
	</select>    

	<select id="courseWeekPartIns">
	INSERT INTO COURSE_WEEK(COURSE_ID,USER_ID,WEEK,PROGRESS_RATE,STUDY_START,STUDY_END)
	SELECT #{courseId},#{userId},WEEK,0,NULL,NULL
	  FROM COURSE_RESOURCE
	 WHERE COURSE_CODE = ( SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId} ) 
	   AND WEEK IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select> 	

	<select id="courseRegisterPartIns" parameterType="Pg">
	INSERT INTO COURSE_REGISTER(COURSE_ID,USER_ID,STATUS,COURSE_COST,APPROVAL_ID,CONFIRM_DATE,CREATE_DATE,CREATE_USER)
	SELECT A.COURSE_ID, 
	       #{userId},
	       if(#{paymentCost} = '0','A',if(#{paymentKind} = 'CASH','B','A')),
	       (SELECT SUM(WEEK_COST)
              FROM COURSE_RESOURCE
             WHERE COURSE_CODE = A.COURSE_CODE
               AND WEEK IN (SELECT WEEK FROM COURSE_WEEK WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId})
             GROUP BY COURSE_ID) COURSE_COST,
	       #{approvalId},
	       if(#{paymentCost} = '0',CURRENT_TIMESTAMP,if(#{paymentKind} = 'CASH',NULL,CURRENT_TIMESTAMP)),
	       CURRENT_TIMESTAMP,
	       #{createUser}
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	 WHERE A.COURSE_ID = #{courseId}	
	 </select>
	        
	<select id="userPoint" parameterType="Pg" resultType="Pg">
		SELECT 	IFNULL(SUM(CASE WHEN VALID_DATE >= CURDATE() THEN IN_POINT - IN_POINT_USE ELSE 0 END), 0) POINT 
		FROM 	POINT
		WHERE 	USER_ID = #{userId}
		AND		CASE WHEN POINT_CODE IN ('COURSE','COURSE_EVENT') THEN DATE_ADD(CURRENT_TIMESTAMP, INTERVAL 15 DAY) ELSE POINT_DATE END <![CDATA[<]]> CURRENT_TIMESTAMP
		AND		USE_YN = 'Y'
	</select>

	<select id="courseTutors" parameterType="Pg" resultType="Pg">
		SELECT  TUTOR_ID, 1 FROM_CNT, IFNULL((SELECT MIN(FROM_CNT) FROM COURSE_TUTOR WHERE COURSE_ID = #{courseId} AND USE_YN = 'Y') - 1, 99999) TO_CNT
		FROM 	COURSE
		WHERE 	COURSE_ID = #{courseId}
		UNION 
		SELECT  TUTOR_ID, FROM_CNT, TO_CNT
		FROM 	COURSE_TUTOR
		WHERE 	COURSE_ID = #{courseId}
		AND		USE_YN = 'Y'
	</select>

	<select id="courseUserCnt" parameterType="Pg" resultType="int">
		SELECT 	COUNT(*) + 1 CNT
		FROM	COURSE_EVAL
		WHERE 	COURSE_ID = #{courseId}
	</select>

	<select id="courseReportExist" parameterType="Pg" resultType="String">
		SELECT 	IF( REPORT_RATE > 0, 'Y', 'N' ) YN
		FROM	COURSE
		WHERE 	COURSE_ID = #{courseId}
	</select>

	<select id="courseRandomReport" parameterType="Pg" resultType="int">
		SELECT 	IFNULL(MAX(SEQ),0)
		FROM	COURSE_REPORT
		WHERE   COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})
		ORDER 	BY  RAND()
		LIMIT 	1
	</select>

	<select id="courseList" parameterType="Pg" resultType="Course">
		SELECT 	A.COURSE_ID,
		       	B.COURSE_NAME,
		       	A.COURSE_CODE,
		       	A.COURSE_COST,
		       	C.CATEGORY_NAME,
		       	B.H_Px,
		       	B.V_Px,
			   	(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = A.COURSE_ID AND USER_ID = #{userId}) CNT 
		FROM 	COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
						  LEFT OUTER JOIN (
								   SELECT C3.CODE C3_CODE,
									  C2.CODE C2_CODE,
									  C1.CODE C1_CODE,
									  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
									 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
										      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
								    WHERE C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
		WHERE 	A.OPEN_YN = 'Y'
		AND		A.CLOSE_YN = 'N'
		AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
		<if test="c1Code != null and c1Code != ''"> AND C.C1_CODE = #{c1Code}</if>
		<if test="c2Code != null and c2Code != ''"> AND C.C2_CODE = #{c2Code}</if>
		<if test="c3Code != null and c3Code != ''"> AND C.C3_CODE = #{c3Code}</if>
		<if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
		ORDER BY B.COURSE_NAME
	</select>
	
	<update id="approvalUpdateForCardRefund" parameterType="pg">
		UPDATE APPROVAL
    	   SET STATUS = 'R',
    	       REFUND_DATE = CURRENT_TIMESTAMP, 
    	       UPDATE_DATE = CURRENT_TIMESTAMP,
    	       UPDATE_USER = #{userId}
    	 WHERE APPROVAL_ID = #{approvalId} 
	</update>  	  

	<update id="registerUpdateForCardRefund" parameterType="pg">
		UPDATE 	COURSE_REGISTER
	       SET 	STATUS = 'R',
	  	       	UPDATE_DATE = CURRENT_TIMESTAMP,
		       	UPDATE_USER = #{userId}
	     WHERE 	APPROVAL_ID = #{approvalId}
	</update>
	          
	<update id="approvalUpdateCancelForCardRefund" parameterType="pg">
		UPDATE APPROVAL
    	   SET STATUS = 'A',
    	       REFUND_DATE = null, 
    	       UPDATE_DATE = CURRENT_TIMESTAMP,
    	       UPDATE_USER = #{userId}
    	 WHERE APPROVAL_ID = #{approvalId} 
	</update>  	  

	<update id="registerUpdateCancelForCardRefund" parameterType="pg">
		UPDATE 	COURSE_REGISTER
	       SET 	STATUS = 'A',
	  	       	UPDATE_DATE = CURRENT_TIMESTAMP,
		       	UPDATE_USER = #{userId}
	     WHERE 	APPROVAL_ID = #{approvalId}
	</update>          

    <insert id="coursePointInsert" parameterType="pg">
    	INSERT INTO POINT ( USER_ID, POINT_DATE, VALID_DATE, POINT_CODE, IN_POINT, REF_ID, REF_ID2 )
	    VALUES ( #{userId}, CURRENT_TIMESTAMP, 
	    			DATE_ADD(CURRENT_TIMESTAMP, INTERVAL (SELECT VALID_MONTH FROM POINT_CODE WHERE POINT_CODE = 'COURSE') MONTH), 
	    			'COURSE',
	    			(SELECT POINT FROM POINT_CODE WHERE POINT_CODE = 'COURSE') * (SELECT COURSE_COST FROM COURSE WHERE COURSE_ID = #{courseId}) / 100,
	    			#{courseId},
	    			#{approvalId} )
    </insert>

    <insert id="paymentPointInsert" parameterType="pg">
    	INSERT INTO POINT ( USER_ID, POINT_DATE, VALID_DATE, POINT_CODE, OUT_POINT, REF_ID2 )
	    VALUES ( #{userId}, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 'PAYMENT', #{paymentPoint}, #{approvalId} )
    </insert>

	<select id="userValidPoint" parameterType="Pg" resultType="Pg">
		SELECT 	SEQ
				,IN_POINT
				,IN_POINT_USE
		FROM 	POINT
		WHERE 	USER_ID = #{userId}
		AND		VALID_DATE >= CURDATE()
		AND		IN_POINT - IN_POINT_USE > 0
		AND		USE_YN = 'Y'
		ORDER 	BY POINT_DATE
	</select>

	<update id="pointUpdate" parameterType="Pg">
		UPDATE 	POINT
		SET 	IN_POINT_USE = #{inPointUse}
		WHERE 	SEQ = #{seq}
	</update>

    <insert id="pointLogInsert" parameterType="pg">
    	INSERT INTO POINT_USE_LOG ( REF_ID2, POINT_SEQ, USE_POINT  )
	    VALUES ( #{approvalId}, #{seq}, #{usePoint}  )
    </insert>

	<select id="userPointLog" parameterType="Pg" resultType="Pg">
		SELECT 	*
		FROM 	POINT_USE_LOG
		WHERE 	REF_ID2 = #{approvalId}
	</select>

	<update id="userPointUseBackUpdate" parameterType="Pg">
		UPDATE 	POINT
		SET 	IN_POINT_USE = IN_POINT_USE - #{usePoint}
		WHERE 	SEQ = #{pointSeq}
	</update>

	<update id="userPointDeleteUpdate" parameterType="Pg">
		UPDATE 	POINT
		SET 	USE_YN = 'N'
		WHERE 	USER_ID = #{userId}
		AND		REF_ID2 = #{approvalId}
	</update>

	<select id="approvalUserId" parameterType="Pg" resultType="String">
		SELECT 	USER_ID
		FROM 	APPROVAL
		WHERE 	APPROVAL_ID = #{approvalId}
	</select>

	<update id="userPointUseBackCancelUpdate" parameterType="Pg">
		UPDATE 	POINT
		SET 	IN_POINT_USE = IN_POINT_USE + #{usePoint}
		WHERE 	SEQ = #{pointSeq}
	</update>

	<update id="userPointDeleteCancelUpdate" parameterType="Pg">
		UPDATE 	POINT
		SET 	USE_YN = 'Y'
		WHERE 	USER_ID = #{userId}
		AND		REF_ID2 = #{approvalId}
	</update>
    
    <insert id="courseEventPointInsert" parameterType="pg">
    	INSERT INTO POINT ( USER_ID, POINT_DATE, VALID_DATE, POINT_CODE, IN_POINT, REF_ID, REF_ID2 )
    	SELECT 	#{userId}
    			,CURRENT_TIMESTAMP
    			,DATE_ADD(CURRENT_TIMESTAMP, INTERVAL EVENT_POINT_MONTH MONTH)
    			,'COURSE_EVENT'
    			,EVENT_POINT
    			,COURSE_ID
    			,#{approvalId}
    	FROM	COURSE
    	WHERE 	COURSE_ID = #{courseId}
    	AND		DATE_FORMAT(CURRENT_TIMESTAMP, '%Y-%m-%d') BETWEEN EVENT_POINT_FROM AND EVENT_POINT_TO
    </insert>
    
    <update id="myCertificateNoUpd" parameterType="pg">
		UPDATE 	COURSE_EVAL
		SET 	CERTIFICATE_NO = (
									SELECT 	COUNT(*)
									FROM	COURSE_REGISTER
									WHERE	COURSE_ID IN ( SELECT COURSE_ID FROM COURSE WHERE COURSE_CODE = ( SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId} ) )
									)
		WHERE 	COURSE_ID = #{courseId}
		AND		USER_ID =  #{userId}
    </update>  
    
</mapper>