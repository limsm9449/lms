<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="user">

	<select id="courseData" parameterType="User" resultType="Course">
	<![CDATA[ 
		SELECT 	A.*
				,ROUND( ((C_PERIOD - REMAIN_DAY) / C_PERIOD) * 100) PERIOD_PROGRESS
		FROM	(	
					SELECT A.COURSE_ID
						   ,A.COURSE_CODE
						   ,B.COURSE_NAME
						   ,B.TEACHER_ID
						   ,C.USER_NAME TEACHER_NAME
						   ,(SELECT COUNT(*) FROM COURSE_RESOURCE WHERE COURSE_CODE = A.COURSE_CODE) WEEK_CNT
							,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE
							,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(D.CONFIRM_DATE,INTERVAL A.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE
							,CASE 	WHEN DATE_FORMAT(CURDATE(),'%Y-%m-%d') < CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') END THEN
										DATEDIFF(DATE(CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(D.CONFIRM_DATE,INTERVAL A.C_PERIOD DAY),'%Y-%m-%d') END),
													DATE(CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') END))
									ELSE
										DATEDIFF(DATE_ADD(CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') END,INTERVAL A.C_PERIOD DAY),CURDATE())
									END + 1 REMAIN_DAY
							,CASE 	WHEN A.TERM_YN = 'Y' THEN
										CASE WHEN A.STUDY_PERIOD_FROM <= DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') AND DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') <= A.STUDY_PERIOD_TO THEN 'Y' ELSE 'N' END
									ELSE
										CASE WHEN DATE_FORMAT(D.CONFIRM_DATE,'%Y-%m-%d') <= DATE_FORMAT(DATE_ADD(D.CONFIRM_DATE,INTERVAL A.C_PERIOD DAY),'%Y-%m-%d') THEN 'Y' ELSE 'N' END
									END IS_STUDY				
						   ,B.H_PX
						   ,B.V_PX
						   ,A.C_PERIOD
						   ,A.MOBILE_YN
		                   	,A.REPORT_RATE
							,A.EXAM_RATE
							,A.DISCUSSION_RATE
							,A.PROGRESS_RATE
		                    ,A.REPORT_FAIL
							,A.EXAM_FAIL
							,A.DISCUSSION_FAIL
							,A.PROGRESS_FAIL
							,A.TOTAL_FAIL
		                    ,IFNULL(E.REPORT, 0) REPORT
							,IFNULL(E.EXAM, 0) EXAM
							,IFNULL(E.DISCUSSION, 0) DISCUSSION
							,IFNULL(E.PROGRESS, 0) PROGRESS
							,IFNULL(E.TOTAL, 0) TOTAL 
							,IFNULL(E.POSTSCRIPT_YN, 'N') POSTSCRIPT_YN
							,IFNULL(E.QUEST_YN, 'N') QUEST_YN
					  FROM COURSE A LEFT JOIN COURSE_CODE AS B ON (A.COURSE_CODE = B.COURSE_CODE )
									LEFT JOIN USER AS C ON (B.TEACHER_ID = C.USER_ID)
									JOIN COURSE_REGISTER D ON D.COURSE_ID = A.COURSE_ID AND D.USER_ID = #{userId}
									JOIN COURSE_EVAL E ON E.COURSE_ID = A.COURSE_ID AND E.USER_ID = #{userId}
					 WHERE A.COURSE_ID = #{courseId} ) A	
	]]> 
    </select>

	<select id="courseExamList" parameterType="User" resultType="Course">
		SELECT 	A.WEEK_TO WEEK
				,DATE_FORMAT(B.SUBMIT_DATE, '%y.%m.%d %H:%i') SUBMIT_DATE
				,DATE_FORMAT(B.SCORE_DATE, '%y.%m.%d %H:%i') SCORE_DATE
                ,IFNULL(B.TOTAL_CNT, 0) TOTAL_CNT 
                ,IFNULL(B.ANSWER_CNT, 0) ANSWER_CNT
                ,(SELECT EXAM_YN FROM COURSE_EVAL WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId}) EXAM_YN
		FROM 	(
					SELECT 	DISTINCT 0 WEEK_TO
					FROM	COURSE_EXAM_TYPE_STANDARD
					WHERE 	EXAM_TYPE_SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId})
					AND		EXAM_KIND = 'TOTAL'
				) A LEFT OUTER JOIN 
					(
						SELECT 	WEEK		
								,MAX(UPDATE_DATE) SUBMIT_DATE
								,MAX(SCORE_DATE) SCORE_DATE
                                ,COUNT(*) TOTAL_CNT
                                ,SUM(CASE WHEN ANSWER = '' OR IFNULL(ANSWER, '-') = '-' THEN 0 ELSE 1 END) ANSWER_CNT
						FROM 	USER_EXAM
						WHERE 	COURSE_ID = #{courseId}
						AND		USER_ID = #{userId}
		                AND		EXAM_KIND = 'TOTAL'
                        GROUP	BY WEEK
					) B ON B.WEEK = A.WEEK_TO
		UNION 	ALL
		SELECT 	A.WEEK_TO WEEK
				,DATE_FORMAT(B.SUBMIT_DATE, '%y.%m.%d %H:%i') SUBMIT_DATE
				,DATE_FORMAT(B.SCORE_DATE, '%y.%m.%d %H:%i') SCORE_DATE
                ,IFNULL(B.TOTAL_CNT, 0) TOTAL_CNT 
                ,IFNULL(B.ANSWER_CNT, 0) ANSWER_CNT
                ,'N' EXAM_YN
		FROM 	(
					SELECT 	DISTINCT WEEK_TO
					FROM	COURSE_EXAM_TYPE_STANDARD
					WHERE 	EXAM_TYPE_SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId})
					AND		EXAM_KIND = 'WEEK'
				) A LEFT OUTER JOIN 
					(
						SELECT 	WEEK		
								,MAX(UPDATE_DATE) SUBMIT_DATE
								,MAX(SCORE_DATE) SCORE_DATE
                                ,COUNT(*) TOTAL_CNT
                                ,SUM(CASE WHEN ANSWER = '' OR IFNULL(ANSWER, '-') = '-' THEN 0 ELSE 1 END) ANSWER_CNT
						FROM 	USER_EXAM
						WHERE 	COURSE_ID = #{courseId}
						AND		USER_ID = #{userId}
		                AND		EXAM_KIND = 'WEEK'
                        GROUP	BY WEEK
					) B ON B.WEEK = A.WEEK_TO
		ORDER 	BY 1 
    </select>

	<select id="courseList" parameterType="User" resultType="Course">
		SELECT DATA.* FROM (
			SELECT 	A.COURSE_ID,
			       	B.COURSE_NAME,
			       	A.COURSE_CODE,
			       	A.COURSE_COST,
			       	C.CATEGORY_NAME,
			       	B.H_Px,
			       	B.V_Px,
			       	(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = A.COURSE_ID AND USER_ID = #{userId}) CNT 
			FROM 	COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
							  LEFT OUTER JOIN (
									   SELECT C3.CODE C3_CODE,
										  C2.CODE C2_CODE,
										  C1.CODE C1_CODE,
										  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
										 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
											      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
									    WHERE C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
			WHERE 	A.COMP_CD = #{compCd}
			AND 	A.OPEN_YN = 'Y'
			AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
			<if test="c1Code != null and c1Code != ''"> AND C.C1_CODE = #{c1Code}</if>
			<if test="c2Code != null and c2Code != ''"> AND C.C2_CODE = #{c2Code}</if>
			<if test="c3Code != null and c3Code != ''"> AND C.C3_CODE = #{c3Code}</if>
			<if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
			 ORDER BY B.COURSE_NAME
		) DATA LIMIT #{limitStart},#{limitUnit}
	</select>
	
	<select id="courseTotal" parameterType="User" resultType="Course">
		SELECT 	COUNT(*) CNT
		FROM 	COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
						  LEFT OUTER JOIN (
								   SELECT C3.CODE C3_CODE,
									  C2.CODE C2_CODE,
									  C1.CODE C1_CODE,
									  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
									 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
										      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
								    WHERE C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
		WHERE 	A.COURSE_KIND = #{compCd}
		AND 	A.OPEN_YN = 'Y'
		AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
	   	<if test="c1Code != null and c1Code != ''"> AND C.C1_CODE = #{c1Code}</if>
	   	<if test="c2Code != null and c2Code != ''"> AND C.C2_CODE = #{c2Code}</if>
	   	<if test="c3Code != null and c3Code != ''"> AND C.C3_CODE = #{c3Code}</if>
	   	<if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
	</select>

	<select id="checkMyCourse" parameterType="User" resultType="Course">
		SELECT 	COURSE_ID
			   	,MOBILE_YN
			   	,(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId}) CNT
	  	FROM 	COURSE
		WHERE 	COURSE_ID = #{courseId}	
    </select>

	<insert id="courseAttendanceLogInsert" parameterType="User">
		INSERT 	INTO COURSE_ATTENDANCE ( COURSE_ID, USER_ID, ATTENDANCE_DATE )
		VALUES	( #{courseId}, #{userId}, CURRENT_TIMESTAMP )
    </insert>
    
</mapper>