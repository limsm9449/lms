<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="exam">

	<select id="userExamCount" parameterType="Exam" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM 	USER_EXAM
		WHERE 	COURSE_ID = #{courseId}
		AND		USER_ID = #{userId}
		AND 	EXAM_KIND = #{examKind}
		AND 	WEEK = #{week}
	</select>
	
	<select id="courseExamTypeStandard" parameterType="Exam" resultType="Exam">
		SELECT 	WEEK_FROM
				,WEEK_TO
		        ,TYPE
		        ,LEVEL
		        ,QUESTION_CNT
		        ,EXAM_KIND
		        ,#{courseId} COURSE_ID
		        ,#{userId} USER_ID
		        ,#{week} WEEK
		FROM 	COURSE_EXAM_TYPE_STANDARD
		WHERE 	EXAM_TYPE_SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId})
		AND		EXAM_KIND = #{examKind}    
<if test="week != '0'.toString()">
		AND		WEEK_TO = #{week}
</if>
	</select>      
	
	<insert id="courseExamInsert" parameterType="Exam">
		INSERT 	INTO USER_EXAM( COURSE_ID, USER_ID, EXAM_KIND, WEEK, SEQ, ANSWER, ANSWER_YN, CREATE_USER, CREATE_DATE )
		SELECT  #{courseId} COURSE_ID, #{userId} USER_ID, #{examKind}, #{week}, SEQ, '',  'N', #{userId}, CURRENT_TIMESTAMP
		FROM 	COURSE_EXAM
		WHERE	COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})
		AND		USE_YN = 'Y'	
		AND		WEEK BETWEEN ${weekFrom} AND ${weekTo}
		AND	 	TYPE = #{type}
		AND		LEVEL = #{level}
		AND 	SEQ NOT IN ( SELECT SEQ FROM USER_EXAM WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId} AND EXAM_KIND = #{examKind} AND WEEK = #{week})
		ORDER 	BY RAND() 
		LIMIT 	${questionCnt}							
	</insert>   
	
	<select id="userExamList" parameterType="Exam" resultType="Exam">
		SELECT 	A.EXAM_KIND,
	       		A.WEEK,
	       		A.SEQ,
	       		B.TYPE,
	       		B.QUESTION, 
	       		B.QA1,
	       		B.QA2,
	       		B.QA3,
	       		B.QA4
	  	FROM 	USER_EXAM A 
					JOIN COURSE_EXAM B ON B.SEQ = A.SEQ AND B.COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})
		WHERE 	A.COURSE_ID = #{courseId}
		AND		A.USER_ID = #{userId}
		AND 	A.EXAM_KIND = #{examKind}
		AND		A.WEEK = #{week}
	</select>
	
	<update id="userExamUpd" parameterType="Exam">
		UPDATE 	USER_EXAM
		SET 	ANSWER = #{answer},
				ANSWER_YN = CASE WHEN #{answer} = (SELECT ANSWER FROM COURSE_EXAM WHERE SEQ = #{seq} AND COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})) THEN 'Y' ELSE 'N' END,
		       	UPDATE_USER = #{userId},
		       	UPDATE_DATE = CURRENT_TIMESTAMP
		WHERE 	COURSE_ID = #{courseId}
		AND		USER_ID = #{userId}
		AND 	EXAM_KIND = #{examKind}
		AND 	WEEK = #{week}
		AND 	SEQ = #{seq}
	</update>
		
	<update id="userExamInsertFlagUpd" parameterType="Exam">
		UPDATE 	COURSE_EVAL
		SET 	EXAM_YN = 'Y'
				,EXAM_WEEK = (SELECT 100 * ( SUM(IF(ANSWER_YN = 'Y',1,0)) / COUNT(*) ) FROM USER_EXAM WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId} AND EXAM_KIND = 'WEEK')
    			,EXAM_TOTAL = (SELECT 100 * ( SUM(IF(ANSWER_YN = 'Y',1,0)) / COUNT(*) ) FROM USER_EXAM WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId} AND EXAM_KIND = 'TOTAL')
		       	,E_TO_DATE = CURRENT_TIMESTAMP
		WHERE 	COURSE_ID = #{courseId}
		AND 	USER_ID = #{userId}
	</update>

	<update id="userExamTotalUpdate" parameterType="Exam">
    	UPDATE 	COURSE_EVAL
    	SET 	EXAM = IF((SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId})) = 100,
    						EXAM_TOTAL,
    						IF((SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId})) = 0,
    							EXAM_WEEK,
    							EXAM_WEEK * (SELECT WEEK_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId}))  / 100 +
    							 EXAM_TOTAL * (SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{courseId}))  / 100
    						)  
    					)
    	 WHERE 	COURSE_ID = #{courseId}
    	 AND    USER_ID = #{userId}
    </update>
    
	<update id="userExamStartTimeUpd" parameterType="Exam">
		UPDATE 	COURSE_EVAL
		SET 	E_FROM_DATE = CASE WHEN E_FROM_DATE IS NULL THEN CURRENT_TIMESTAMP ELSE E_FROM_DATE END
		WHERE 	COURSE_ID = #{courseId}
		AND 	USER_ID = #{userId}
	</update>
	
	<select id="userExamStartTime" parameterType="Exam" resultType="String">
		SELECT  DATE_FORMAT(E_FROM_DATE, '%Y%m%d%H%i%s') 
		FROM	COURSE_EVAL
		WHERE 	COURSE_ID = #{courseId}
		AND 	USER_ID = #{userId}
	</select>
	
	<select id="userExamResultList" parameterType="Exam" resultType="Exam">
		SELECT 	A.SEQ,
	       		B.TYPE,
	       		B.QUESTION, 
	       		B.QA1,
	       		B.QA2,
	       		B.QA3,
	       		B.QA4,
	       		A.ANSWER,
	       		A.ANSWER_YN,
	       		B.ANSWER EXAM_ANSWER,
	       		B.ANSWER_DESC
	  	FROM 	USER_EXAM A 
					JOIN COURSE_EXAM B ON B.SEQ = A.SEQ AND B.COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})
		WHERE 	A.COURSE_ID = #{courseId}
		AND		A.USER_ID = #{userId}
		AND 	A.EXAM_KIND = CASE WHEN #{week} = '0' THEN 'TOTAL' ELSE 'WEEK' END
		AND 	A.WEEK = #{week}
	</select>
	
	<select id="userExamScore" parameterType="Exam" resultType="Exam">
		SELECT 	EXAM_TOTAL
	  	FROM 	COURSE_EVAL
		WHERE 	COURSE_ID = #{courseId}
		AND		USER_ID = #{userId}
	</select>
	
	
	<!-- 강좌별 설문지 통계 -->

    <select id="examManageList" parameterType="Exam" resultType="Exam">
	<![CDATA[
	SELECT DATA.* FROM (
	    SELECT D.CATEGORY_NAME
	           ,A.COURSE_ID
		       ,A.COURSE_CODE
		       ,B.COURSE_NAME
		       ,IFNULL(E.OVER90,0) OVER90
		       ,IFNULL(E.OVER80,0) OVER80
		       ,IFNULL(E.OVER70,0) OVER70
		       ,IFNULL(E.UNDER70,0) UNDER70
		  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		                LEFT OUTER JOIN (
							   SELECT C3.CODE C3_CODE,
								  C2.CODE C2_CODE,
								  C1.CODE C1_CODE,
								  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
								 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
					    LEFT OUTER JOIN (
					    	SELECT COURSE_ID,
							       SUM(IF(EXAM >= 90,1,0)) OVER90,
							       SUM(IF(EXAM >= 80,1,0)) OVER80,
							       SUM(IF(EXAM >= 70,1,0)) OVER70,
							       SUM(IF(EXAM < 70,1,0)) UNDER70
							  FROM COURSE_EVAL
							 WHERE EXAM > 0 
							 GROUP BY COURSE_ID ) E ON E.COURSE_ID = A.COURSE_ID
		 WHERE A.COURSE_KIND IN ('NORMAL','COMPANY')
	]]>
		   <if test="c1Code != null and c1Code != ''"> AND D.C1_CODE = #{c1Code}</if>
		   <if test="c2Code != null and c2Code != ''"> AND D.C2_CODE = #{c2Code}</if>
		   <if test="c3Code != null and c3Code != ''"> AND D.C3_CODE = #{c3Code}</if>
		   <if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
	 ORDER BY D.CATEGORY_NAME,B.COURSE_NAME,A.CHASU DESC  
	) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="examManageTotal" parameterType="Exam" resultType="Exam">
	<![CDATA[
    SELECT COUNT(*) CNT
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	                LEFT OUTER JOIN (
						   SELECT C3.CODE C3_CODE,
							  C2.CODE C2_CODE,
							  C1.CODE C1_CODE,
							  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
							 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
								      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
						    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
	 WHERE A.COURSE_KIND IN ('NORMAL','COMPANY')
	]]>
	   <if test="c1Code != null and c1Code != ''"> AND D.C1_CODE = #{c1Code}</if>
	   <if test="c2Code != null and c2Code != ''"> AND D.C2_CODE = #{c2Code}</if>
	   <if test="c3Code != null and c3Code != ''"> AND D.C3_CODE = #{c3Code}</if>
	   <if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>   
    </select>	
	
    <select id="examUserManageList" parameterType="Exam" resultType="Exam">
	SELECT DATA.* FROM (
	    SELECT A.USER_ID
	           ,B.USER_NAME
		       ,B.EMAIL
		       ,B.MOBILE
		       ,C.EXAM
		       ,C.COMPLETE_YN
		  FROM COURSE_REGISTER A LEFT OUTER JOIN USER B ON A.USER_ID = B.USER_ID
					             LEFT OUTER JOIN COURSE_EVAL C ON C.COURSE_ID = A.COURSE_ID AND C.USER_ID = A.USER_ID
		 WHERE A.COURSE_ID = #{courseId}
	       <if test="searchStr != null and searchStr != ''">
		     <if test="searchKind == 'USER_ID'">
		       AND UPPER(A.USER_ID) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
		     </if>
		     <if test="searchKind == 'USER_NAME'">
		       AND UPPER(B.USER_NAME) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
		     </if>
	       </if>			 
	 	ORDER BY B.USER_NAME
	) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="examUserManageTotal" parameterType="Exam" resultType="Exam">
    SELECT COUNT(*) CNT
	  FROM COURSE_REGISTER A LEFT OUTER JOIN USER B ON A.USER_ID = B.USER_ID
	 WHERE A.COURSE_ID = #{courseId}
       <if test="searchStr != null and searchStr != ''">
	     <if test="searchKind == 'USER_ID'">
	       AND UPPER(A.USER_ID) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
	     </if>
	     <if test="searchKind == 'USER_NAME'">
	       AND UPPER(B.USER_NAME) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
	     </if>
       </if>
    </select>	

    <select id="examUserDetail" parameterType="Exam" resultType="Exam">
	SELECT C.SEQ,
	       C.QUESTION,
	       C.TYPE,
	       A.ANSWER USER_ANSWER,
	       C.ANSWER	       
	  FROM USER_EXAM A JOIN COURSE B ON B.COURSE_ID = A.COURSE_ID
	  	           JOIN COURSE_EXAM C ON C.COURSE_CODE = B.COURSE_CODE AND C.SEQ = A.SEQ
	 WHERE A.COURSE_ID = #{courseId}
	   AND A.USER_ID = #{userId}
    </select>	
    
</mapper>