<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="main">

	<select id="categoryList" parameterType="Main" resultType="Course">
		SELECT 	CODE, CODE_NAME
		FROM 	CATEGORY
		WHERE	DEPTH = 1
		AND 	USE_YN = 'Y'
		ORDER 	BY CODE_NAME
	</select>

	<select id="mainCourseList" parameterType="Main" resultType="Course">
		SELECT DATA.* FROM (
			SELECT 	A.COURSE_ID,
					B.COURSE_NAME,
					A.COURSE_CODE
			FROM 	COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
			WHERE 	A.OPEN_YN = 'Y'
			AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
			ORDER 	BY B.COURSE_NAME
		) DATA LIMIT #{limitStart},#{limitUnit}
	</select>
	
	<select id="mainCourseTotal" parameterType="Main" resultType="Course">
		SELECT COUNT(*) CNT
		FROM 	COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		WHERE 	A.OPEN_YN = 'Y'
		AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
	</select>
	
	<select id="courseData" parameterType="Main" resultType="Course">
		SELECT D.CATEGORY_NAME
		       ,A.COURSE_ID
		       ,A.COURSE_CODE
		       ,B.COURSE_NAME
		       ,A.TUTOR_ID
		       ,(SELECT USER_NAME FROM USER WHERE USER_ID = A.TUTOR_ID) TUTOR_NAME
		       ,B.TEACHER_ID
		       ,(SELECT USER_NAME FROM USER WHERE USER_ID = B.TEACHER_ID) TEACHER_NAME
		       ,A.CHASU
		       ,A.C_PERIOD
		       ,C.LEARING_GOAL
		       ,C.LEARING_CONTENT
		       ,C.EVAL_METHOD
		       ,C.LEARING_TARGET
		       ,C.LEARING_COST
		       ,A.COURSE_COST
		       ,A.REPORT_RATE
		       ,A.EXAM_RATE
		       ,A.DISCUSSION_RATE
		       ,A.PROGRESS_RATE
		       ,(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = A.COURSE_ID AND USER_ID = #{userId} AND STATUS IN ('A','B')) SUB_CNT
		       ,B.H_Px
		       ,B.V_Px
		       ,C.WEEK_COST_YN
		       ,(SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'WEEK_COST_YN' AND DD_KEY = C.WEEK_COST_YN) WEEK_COST_YN_NAME
		       ,E.CAREER
		       ,CASE WHEN IFNULL(A.MOBILE_YN, 'N') = 'Y' OR IFNULL(C.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
		       ,(SELECT COUNT(*) FROM COURSE_RESOURCE WHERE COURSE_CODE = A.COURSE_CODE) WEEK_CNT 
		       	,IFNULL(A.TERM_YN,'N') TERM_YN
                ,IFNULL(A.TERM_PERIOD_FROM, '') TERM_PERIOD_FROM
                ,IFNULL(A.TERM_PERIOD_TO, '') TERM_PERIOD_TO
                ,IFNULL(A.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(A.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
                ,IFNULL(ROUND(F.GRADE, 1), 0) GRADE
                ,CASE WHEN IFNULL(F.GRADE, 0) > 0 AND IFNULL(F.GRADE, 0) <![CDATA[<=]]> 0.5 THEN 'star_half'
					 WHEN IFNULL(F.GRADE, 0) > 0.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE1
                ,CASE WHEN IFNULL(F.GRADE, 0) > 1 AND IFNULL(F.GRADE, 0) <![CDATA[<=]]> 1.5 THEN 'star_half'
					 WHEN IFNULL(F.GRADE, 0) > 1.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE2
                ,CASE WHEN IFNULL(F.GRADE, 0) > 2 AND IFNULL(F.GRADE, 0) <![CDATA[<=]]> 2.5 THEN 'star_half'
					 WHEN IFNULL(F.GRADE, 0) > 2.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE3
                ,CASE WHEN IFNULL(F.GRADE, 0) > 3 AND IFNULL(F.GRADE, 0) <![CDATA[<=]]> 3.5 THEN 'star_half'
					 WHEN IFNULL(F.GRADE, 0) > 3.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE4
                ,CASE WHEN IFNULL(F.GRADE, 0) > 4 AND IFNULL(F.GRADE, 0) <![CDATA[<=]]> 4.5 THEN 'star_half'
					 WHEN IFNULL(F.GRADE, 0) > 4.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE5
                ,IFNULL(F.GRADE_CNT, 0) GRADE_CNT
                ,A.COURSE_COST
                ,A.TOTAL_FAIL
                ,CASE WHEN (	SELECT 	COUNT(*)
			                	FROM	USER_INTEREST_COURSE
			                	WHERE	USER_ID = #{userId}
			                	AND		COURSE_ID = A.COURSE_ID ) > 0 THEN 'Y' ELSE 'N' END INTEREST_COURSE_YN
		  FROM COURSE A 
			          LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		              LEFT OUTER JOIN COURSE_MASTER C ON A.COURSE_CODE = C.COURSE_CODE
		              LEFT OUTER JOIN (
								   SELECT C3.CODE C3_CODE,
									  C2.CODE C2_CODE,
									  C1.CODE C1_CODE,
									  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
									 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
										      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
								    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
					  LEFT OUTER JOIN USER E ON B.TEACHER_ID = E.USER_ID	
					LEFT OUTER JOIN (
						SELECT	COURSE_ID
								,AVG(EVAL) GRADE
								,COUNT(*) GRADE_CNT
                       	FROM 	POSTSCRIPT
                       	WHERE	COURSE_ID = #{courseId}
                        GROUP 	BY COURSE_ID ) F ON F.COURSE_ID = A.COURSE_ID
		 WHERE A.COURSE_ID = #{courseId}
	</select>
	
	<!-- 결재할 과정 리스트 -->
	<select id="applicationCourseList" resultType="Course">
	SELECT D.CATEGORY_NAME
	       ,A.COURSE_ID
	       ,B.COURSE_NAME
	       ,A.COURSE_COST
	       ,A.COURSE_CODE
		   ,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CURDATE(),'%Y-%m-%d') END C_FROM_DATE
		   ,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CURDATE(),INTERVAL A.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE
	       ,CASE WHEN A.TERM_YN = 'Y' THEN DATEDIFF(A.STUDY_PERIOD_TO, A.STUDY_PERIOD_FROM) + 1 ELSE A.C_PERIOD END C_PERIOD
           ,A.TERM_YN
           ,A.MOBILE_YN
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		                LEFT OUTER JOIN (
							   SELECT C3.CODE C3_CODE,
								  C2.CODE C2_CODE,
								  C1.CODE C1_CODE,
								  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
								 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
	 WHERE A.COURSE_ID IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select>

	<!-- 결재할 과정의 주차 리스트 -->
	<select id="applicationCourseWeekList" resultType="Course">
	SELECT C.WEEK,
	       C.TITLE,
	       C.WEEK_COST
	  FROM COURSE A LEFT OUTER JOIN COURSE_RESOURCE C ON C.COURSE_CODE = A.COURSE_CODE
	 WHERE A.COURSE_ID = #{courseId}
	   AND C.WEEK IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select>
	
	<select id="courseResourceData" parameterType="Main" resultType="CourseResource">
	SELECT WEEK,
	       TITLE,
	       WEEK_COST,
	       WEEK_TIME
	  FROM COURSE_RESOURCE 
	 WHERE COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId}) 
	</select>

	<select id="rejectCourseRegisterDel" parameterType="Main">
	DELETE FROM COURSE_REGISTER
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>

	<select id="rejectCourseEvalDel" parameterType="Main">
	DELETE FROM COURSE_EVAL
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>

	<select id="rejectCourseWeekDel" parameterType="Main">
	DELETE FROM COURSE_WEEK
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	 </select>
	
	<select id="courseRegisterIns" parameterType="Main">
	INSERT INTO COURSE_REGISTER(COURSE_ID,USER_ID,STATUS,COURSE_COST,APPROVAL_ID,CONFIRM_DATE,CREATE_DATE,CREATE_USER)
	SELECT A.COURSE_ID, 
	       #{userId},
	       if(#{paymentKind} = 'CASH','B','A'),
	       A.COURSE_COST,
	       #{approvalId},
	       if(#{paymentKind} = 'CASH',NULL,CURRENT_TIMESTAMP),
	       CURRENT_TIMESTAMP,
	       #{createUser}
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	 WHERE COURSE_ID = #{courseId}	
	 </select>

	<select id="approvalIns" parameterType="Main">
	INSERT INTO APPROVAL(APPROVAL_ID,USER_ID,STATUS,TOTAL_COST,PAYMENT_POINT,PAYMENT_COST,PAYMENT_KIND,PAYMENT_BANK,PAYMENT_DATE,CREATE_DATE,CREATE_USER)
	VALUES(#{approvalId},#{userId},if(#{paymentKind} = 'CASH','B','A'),#{totalCost},#{paymentPoint},#{paymentCost},#{paymentKind},#{paymentBank},CURRENT_TIMESTAMP,CURRENT_TIMESTAMP,#{createUser})   
	</select>	

	<select id="courseEvalIns" parameterType="Main">
	INSERT INTO COURSE_EVAL(COURSE_ID,USER_ID,TUTOR_ID,REPORT,EXAM,DISCUSSION,PROGRESS,TOTAL,LAST_WEEK,LAST_PAGE,REPORT_SEQ,CREATE_DATE,CREATE_USER,EXAM_WEEK,EXAM_TOTAL)
	VALUES (#{courseId},#{userId},#{tutorId},0,0,0,0,0,1,1,#{reportSeq},CURRENT_TIMESTAMP,#{createUser},0,0)
	</select>
	
	<select id="courseWeekIns" parameterType="Main">
	INSERT INTO COURSE_WEEK(COURSE_ID,USER_ID,WEEK,PROGRESS_RATE,STUDY_START,STUDY_END)
	SELECT #{courseId},#{userId},WEEK,0,NULL,NULL
	  FROM COURSE_RESOURCE
	 WHERE COURSE_CODE = ( SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId} ) 
	</select>   

	<select id="courseWeekPartIns">
	INSERT INTO COURSE_WEEK(COURSE_ID,USER_ID,WEEK,PROGRESS_RATE,STUDY_START,STUDY_END)
	SELECT #{courseId},#{userId},WEEK,0,NULL,NULL
	  FROM COURSE_RESOURCE
	 WHERE COURSE_CODE = ( SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId} ) 
	   AND WEEK IN 
	 	<foreach item="item" index="index" collection="list" open="(" separator="," close=")">
         	#{item}
 		</foreach>
	</select>

	<select id="courseRegisterPartIns" parameterType="Main">
	INSERT INTO COURSE_REGISTER(COURSE_ID,USER_ID,STATUS,COURSE_COST,APPROVAL_ID,CONFIRM_DATE,CREATE_DATE,CREATE_USER)
	SELECT A.COURSE_ID, 
	       #{userId},
	       if(#{paymentKind} = 'CASH','B','A'),
	       IFNULL(C.COURSE_COST,0),
	       #{approvalId},
	       if(#{paymentKind} = 'CASH',NULL,CURRENT_TIMESTAMP),
	       CURRENT_TIMESTAMP,
	       #{createUser}
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	                LEFT OUTER JOIN (SELECT COURSE_ID, SUM(WEEK_COST) COURSE_COST
	                                   FROM COURSE_WEEK_COST
	                                  WHERE COURSE_ID = #{courseId}
	                                    AND WEEK IN (SELECT WEEK FROM COURSE_WEEK WHERE COURSE_ID = #{courseId} AND USER_ID = #{userId})
	                                  GROUP BY COURSE_ID) C ON A.COURSE_ID = C.COURSE_ID	  
	 WHERE A.COURSE_ID = #{courseId}	
	 </select>
	        
	<select id="userPoint" parameterType="Main" resultType="Main">
		SELECT IFNULL(SUM(IN_POINT - OUT_POINT),0) POINT 
		  FROM POINT
		 WHERE USER_ID = #{userId}
	</select>

	<select id="courseTutors" parameterType="Main" resultType="Main">
		SELECT  TUTOR_ID, 1 FROM_CNT, IFNULL((SELECT MIN(FROM_CNT) FROM COURSE_TUTOR WHERE COURSE_ID = #{courseId} AND USE_YN = 'Y') - 1, 99999) TO_CNT
		FROM 	COURSE
		WHERE 	COURSE_ID = #{courseId}
		UNION 
		SELECT  TUTOR_ID, FROM_CNT, TO_CNT
		FROM 	COURSE_TUTOR
		WHERE 	COURSE_ID = #{courseId}
		AND		USE_YN = 'Y'
	</select>

	<select id="courseUserCnt" parameterType="Main" resultType="int">
		SELECT 	COUNT(*) + 1 CNT
		FROM	COURSE_EVAL
		WHERE 	COURSE_ID = #{courseId}
	</select>

	<select id="courseReportExist" parameterType="Main" resultType="String">
		SELECT 	IF( REPORT_RATE > 0, 'Y', 'N' ) YN
		FROM	COURSE
		WHERE 	COURSE_ID = #{courseId}
	</select>

	<select id="courseRandomReport" parameterType="Main" resultType="int">
		SELECT 	IFNULL(MAX(SEQ),0)
		FROM	COURSE_REPORT
		WHERE   COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId})
		ORDER 	BY  RAND()
		LIMIT 	1
	</select>

	<sql id="courseListQuery">
		SELECT 	A.COURSE_ID,
		       	B.COURSE_NAME,
		       	A.COURSE_CODE,
		       	A.COURSE_COST,
		       	C.CATEGORY_NAME,
		       	B.H_Px,
		       	B.V_Px,
			   	(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = A.COURSE_ID AND USER_ID = #{userId} AND STATUS = 'A') CNT,
                IFNULL(ROUND(D.GRADE, 1), 0) GRADE,
                CASE WHEN IFNULL(D.GRADE, 0) > 0 AND IFNULL(D.GRADE, 0) <![CDATA[<=]]> 0.5 THEN 'star_half'
					 WHEN IFNULL(D.GRADE, 0) > 0.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE1,
                CASE WHEN IFNULL(D.GRADE, 0) > 1 AND IFNULL(D.GRADE, 0) <![CDATA[<=]]> 1.5 THEN 'star_half'
					 WHEN IFNULL(D.GRADE, 0) > 1.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE2,
                CASE WHEN IFNULL(D.GRADE, 0) > 2 AND IFNULL(D.GRADE, 0) <![CDATA[<=]]> 2.5 THEN 'star_half'
					 WHEN IFNULL(D.GRADE, 0) > 2.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE3,
                CASE WHEN IFNULL(D.GRADE, 0) > 3 AND IFNULL(D.GRADE, 0) <![CDATA[<=]]> 3.5 THEN 'star_half'
					 WHEN IFNULL(D.GRADE, 0) > 3.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE4,
                CASE WHEN IFNULL(D.GRADE, 0) > 4 AND IFNULL(D.GRADE, 0) <![CDATA[<=]]> 4.5 THEN 'star_half'
					 WHEN IFNULL(D.GRADE, 0) > 4.5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE5,
                IFNULL(D.GRADE_CNT, 0) GRADE_CNT,
                CASE WHEN IFNULL(A.MOBILE_YN, 'N') = 'Y' OR IFNULL(F.RESPONSIVE_CONTENTS_YN, 'N') = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
		FROM 	COURSE A 
						LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
						LEFT OUTER JOIN (
						   	SELECT 	C3.CODE C3_CODE,
							  		C2.CODE C2_CODE,
							  		C1.CODE C1_CODE,
							  		CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
							FROM 	CATEGORY C3 
										LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
								      	LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
						    WHERE 	C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
						LEFT OUTER JOIN (
							SELECT	COURSE_ID
									,AVG(EVAL) GRADE
									,COUNT(*) GRADE_CNT
                            FROM 	POSTSCRIPT
                            GROUP 	BY COURSE_ID ) D ON D.COURSE_ID = A.COURSE_ID
						LEFT OUTER JOIN (
							SELECT	COURSE_CODE
									,COUNT(*) CNT
                            FROM 	COURSE
                            GROUP 	BY COURSE_CODE ) E ON E.COURSE_CODE = A.COURSE_CODE
                      	LEFT OUTER JOIN COURSE_MASTER F ON F.COURSE_CODE = A.COURSE_CODE
		WHERE 	A.OPEN_YN = 'Y'
		AND		A.OPEN_CLOSE_YN = 'N'
		AND		A.CLOSE_YN = 'N'
		AND		A.COMP_CD = #{compCd}
		AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
		<if test="categorys != null"> 
			AND C.C1_CODE IN
			<foreach item="item" index="index" collection="categorys"
			      open="(" separator="," close=")">
			        #{item}
			  </foreach>
		</if>
		<if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
		<if test="workerCardYn == 'Y'.toString() || supportEmployerYn == 'Y'.toString() || normalCourseYn == 'Y'.toString()">
			AND ( 1 = 2 
					<if test="workerCardYn == 'Y'.toString()"> OR	A.WORKER_CARD_YN = 'Y'</if>
					<if test="supportEmployerYn == 'Y'.toString()"> OR	A.SUPPORT_EMPLOYER_YN = 'Y'</if>
					<if test="normalCourseYn == 'Y'.toString()"> OR	A.NORMAL_COURSE_YN = 'Y'</if>
				)
		</if>
		<if test="orderKind == 'Popularity'">
			ORDER BY E.CNT DESC, B.COURSE_NAME
		</if>
		<if test="orderKind == 'Recommendation'">
			ORDER BY IFNULL(D.GRADE_CNT, 0) DESC, IFNULL(D.GRADE, 0) DESC, B.COURSE_NAME
		</if>
	</sql>
	<select id="courseList" parameterType="Main" resultType="Course">
		SELECT 	DATA.* 
		FROM 	(
					<include refid="courseListQuery" />
				) DATA 
		LIMIT #{limitStart},#{limitUnit}
	</select>	        
	<select id="courseListTotal" parameterType="Main" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM	(
			<include refid="courseListQuery" />
				) DATA
	</select>

	<select id="faqList" parameterType="Main" resultType="Board">
		SELECT  SEQ
				,TITLE
				,DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d') CREATE_DATE
		FROM	BOARD_FAQ
		WHERE	CATEGORY IN ( SELECT DD_KEY FROM CODE WHERE DD_MAIN = 'FAQ_${compType}' )
		ORDER 	BY SEQ DESC
		LIMIT 	#{cnt}
	</select>	        
	
	<select id="noticeList" parameterType="Main" resultType="Board">
		SELECT  SEQ
				,TITLE
				,DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d') CREATE_DATE
		FROM	MAIN_BOARD_NOTICE
		WHERE	COMP_CD = #{compCd}
		ORDER 	BY SEQ DESC
		LIMIT 	#{cnt}
	</select>	        

	<select id="eventList" parameterType="Main" resultType="Board">
		SELECT  SEQ
				,TITLE
				,DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d') CREATE_DATE
		FROM	MAIN_BOARD_EVENT
		WHERE	COMP_CD = #{compCd}
		ORDER 	BY SEQ DESC
		LIMIT 	#{cnt}
	</select>	        

	<select id="counselList" parameterType="Main" resultType="Counsel">
		SELECT	SEQ
				,TITLE
				,DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d') CREATE_DATE
		FROM	COUNSEL
		WHERE	USER_ID = #{userId}
		ORDER 	BY SEQ DESC
		LIMIT 	#{cnt}
	</select>	        

	<select id="courseSummary" parameterType="Main" resultType="Course">
	<![CDATA[ 
		SELECT 	(
					SELECT	COUNT(*) CNT
                    FROM	COURSE_REGISTER CR
								JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID
					WHERE 	CR.USER_ID = #{userId}
					AND 	CR.STATUS = 'A'
					AND 	( DATE_FORMAT(CURDATE(),'%Y-%m-%d')
									BETWEEN 	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
									AND 		CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
								OR 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') < CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END )
				) ATTEND_COURSE_CNT
                ,(
					SELECT	COUNT(*) CNT
                    FROM	COURSE_REGISTER CR
					WHERE 	CR.USER_ID = #{userId}
					AND 	CR.STATUS = 'B'
				) WAITING_COURSE_CNT
				,(
					SELECT	COUNT(*) CNT
                    FROM	COURSE_REGISTER CR
								JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID
					WHERE 	CR.USER_ID = #{userId}
					AND 	CR.STATUS = 'A'
					AND 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') > CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END 
				) COMPLETE_COURSE_CNT
                ,(
					SELECT	MIN(CASE WHEN C.TERM_YN = 'Y' THEN
										DATEDIFF(DATE(C.STUDY_PERIOD_TO),CURDATE())
									ELSE
										DATEDIFF(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),CURDATE())
									END + 1) REMAIN_DAY
                    FROM	COURSE_REGISTER CR
								JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID
					WHERE 	CR.USER_ID = #{userId}
					AND 	CR.STATUS = 'A'
					AND 	( DATE_FORMAT(CURDATE(),'%Y-%m-%d')
									BETWEEN 	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
									AND 		CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
								OR 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') < CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END )
				) COURSE_REMAIN_DAY
	]]> 
	</select>	        

	<select id="attendCourseList" parameterType="Main" resultType="Course">
	<![CDATA[ 
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
                E.PROGRESS,
		       	CD.H_PX,
		       	CD.V_PX,
		       	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
		        CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
				CASE WHEN C.TERM_YN = 'Y' THEN
							DATEDIFF(DATE(C.STUDY_PERIOD_TO),CURDATE())
						ELSE
							DATEDIFF(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),CURDATE())
						END + 1 REMAIN_DAY
				,CASE 	WHEN C.TERM_YN = 'Y' THEN
							CASE WHEN C.STUDY_PERIOD_FROM <= DATE_FORMAT(CURDATE(),'%Y-%m-%d') AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') <= C.STUDY_PERIOD_TO THEN 'Y' ELSE 'N' END
						ELSE
							CASE WHEN DATE_FORMAT(CURDATE(),'%Y-%m-%d') <= DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') THEN 'Y' ELSE 'N' END
						END IS_STUDY				
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_EVAL E ON CR.COURSE_ID = E.COURSE_ID AND CR.USER_ID = E.USER_ID
		WHERE 	CR.USER_ID = #{userId}
		AND 	CR.STATUS = 'A'
		AND 	( DATE_FORMAT(CURDATE(),'%Y-%m-%d')
						BETWEEN 	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
						AND 		CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
					OR 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') < CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END )
		ORDER 	BY REMAIN_DAY, CD.COURSE_NAME
		LIMIT 	4
	]]> 
	</select>	        

	<select id="completeCourseList" parameterType="User" resultType="Course">
	<![CDATA[ 
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
		       	E.TOTAL,
			    CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
			    CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
                E.COMPLETE_YN
		FROM 	COURSE_REGISTER CR
		           JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
		           JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		           JOIN COURSE_EVAL E ON CR.COURSE_ID = E.COURSE_ID AND CR.USER_ID = E.USER_ID
		WHERE 	CR.USER_ID = #{userId}
		AND 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') > CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END 
		AND		CR.STATUS = 'A'
		ORDER 	BY C_FROM_DATE DESC
		LIMIT 	4
	]]> 
    </select>	
    
	<select id="categoryMainCourseList" parameterType="Main" resultType="Course">
		SELECT 	A.COURSE_ID,
		       	B.COURSE_NAME,
		       	A.COURSE_CODE,
		       	A.COURSE_COST,
		       	C.CATEGORY_NAME,
		       	B.H_Px,
		       	B.V_Px,
			   	(SELECT COUNT(*) FROM COURSE_REGISTER WHERE COURSE_ID = A.COURSE_ID AND USER_ID = #{userId} AND STATUS = 'A') CNT,
                IFNULL(ROUND(D.GRADE, 1), 0) GRADE,
                CASE WHEN IFNULL(GRADE, 0) > 0 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 0.5 THEN 'star_half'
					 WHEN IFNULL(GRADE, 0) > 0.5 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 1 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE1,
                CASE WHEN IFNULL(GRADE, 0) > 1 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 1.5 THEN 'star_half'
					 WHEN IFNULL(GRADE, 0) > 1.5 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 2 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE2,
                CASE WHEN IFNULL(GRADE, 0) > 2 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 2.5 THEN 'star_half'
					 WHEN IFNULL(GRADE, 0) > 2.5 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 3 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE3,
                CASE WHEN IFNULL(GRADE, 0) > 3 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 3.5 THEN 'star_half'
					 WHEN IFNULL(GRADE, 0) > 3.5 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 4 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE4,
                CASE WHEN IFNULL(GRADE, 0) > 4 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 4.5 THEN 'star_half'
					 WHEN IFNULL(GRADE, 0) > 4.5 AND IFNULL(GRADE, 0) <![CDATA[<=]]> 5 THEN 'star_active'
                     ELSE 'star_inactive' END GRADE5,
                IFNULL(D.GRADE_CNT, 0) GRADE_CNT,
                C.C1_CODE_NAME,
                IFNULL(A.MOBILE_YN, 'N') MOBILE_YN
		FROM 	COURSE A 
						LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
						LEFT OUTER JOIN (
						   	SELECT 	C3.CODE C3_CODE,
							  		C2.CODE C2_CODE,
							  		C1.CODE C1_CODE,
							  		C1.CODE_NAME C1_CODE_NAME,
							  		CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
							FROM 	CATEGORY C3 
										LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
								      	LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
						    WHERE 	C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
						LEFT OUTER JOIN (
							SELECT	COURSE_ID
									,AVG(EVAL) GRADE
									,COUNT(*) GRADE_CNT
                            FROM 	POSTSCRIPT
                            GROUP 	BY COURSE_ID ) D ON D.COURSE_ID = A.COURSE_ID
						JOIN (
							SELECT 	*
							FROM	MAIN_PAGE
							WHERE 	COMP_CD = #{compCd}
							AND		IFNULL(CATEGORY_MAIN_YN,'N') = 'Y' ) E ON E.COURSE_ID = A.COURSE_ID                            
		WHERE 	A.OPEN_YN = 'Y'
		AND		A.CLOSE_YN = 'N'
		AND		( IFNULL(A.TERM_YN,'N') = 'N' OR ( A.TERM_YN = 'Y' AND DATE_FORMAT(CURDATE(),'%Y-%m-%d') BETWEEN A.TERM_PERIOD_FROM AND A.TERM_PERIOD_TO ) )
		ORDER 	BY B.COURSE_NAME
		LIMIT 	3
	</select>
	
	<insert id="companyInquiryInsert" parameterType="Main">
		INSERT INTO USER_INQUIRY ( KIND, USER_ID, USER_NAME, MOBILE, TEL, EMAIL, COMPANY_NAME, TITLE, CONTENTS, CREATE_DATE )
		VALUES ( 'COMPANY', #{userId}, #{userName}, #{mobile}, #{tel}, #{email}, #{companyName}, #{title}, #{contents}, CURRENT_TIMESTAMP ) 
	</insert>	        

	<insert id="interestCourseInsert" parameterType="Main">
		INSERT INTO USER_INTEREST_COURSE ( USER_ID, COURSE_ID )
		VALUES ( #{userId}, #{courseId} ) 
	</insert>	        

	<delete id="interestCourseDelete" parameterType="Main">
		DELETE 	FROM USER_INTEREST_COURSE
		WHERE	USER_ID = #{userId}
		AND		COURSE_ID = #{courseId}
	</delete>	        
	
	<select id="isExistCompAuth" parameterType="Main" resultType="Main">
		SELECT 	COUNT(*) CNT
		FROM 	COMPANY_AUTH
		WHERE 	COMP_CD = #{compCd}
		AND		AUTH_KEY = #{authKey}
    </select>	
	
	<sql id="myOrderQuery">
		SELECT 	CD.COURSE_NAME,
		       	C.COURSE_ID,
		       	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
		        CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
				DATEDIFF(DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END),
										DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END)) + 1 C_PERIOD,
				DATE_FORMAT(B.PAYMENT_DATE,'%Y-%m-%d %H:%i') PAYMENT_DATE,
                B.TOTAL_COST,
                B.PAYMENT_KIND,
                ( SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'PAYMENT_KIND' AND DD_KEY = B.PAYMENT_KIND ) PAYMENT_KIND_NAME,
                B.STATUS,
                ( SELECT DD_VALUE FROM CODE WHERE DD_MAIN = 'USER_APPROVAL_STATUS' AND DD_KEY = B.STATUS ) STATUS_NAME,
                CASE WHEN C.MOBILE_YN = 'Y' OR CM.RESPONSIVE_CONTENTS_YN = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN,
				@ROWNUM := @ROWNUM + 1 ROWNUM
		FROM 	COURSE_REGISTER CR
					JOIN APPROVAL B ON B.APPROVAL_ID = CR.APPROVAL_ID
					JOIN COURSE C ON C.COURSE_ID = CR.COURSE_ID		 
					JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
					JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE,
					(SELECT @ROWNUM := 0) NUM
		WHERE 	CR.USER_ID = #{userId}
		AND 	( DATE_FORMAT(CURDATE(),'%Y-%m-%d')
						BETWEEN 	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END
						AND 		CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END
					OR 	DATE_FORMAT(CURDATE(),'%Y-%m-%d') <![CDATA[<]]> CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END )
<if test="searchMonth != null and searchMonth != ''">
		AND 	B.PAYMENT_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL -${searchMonth} MONTH) AND CURDATE()
</if>					
		ORDER 	BY B.PAYMENT_DATE DESC
	</sql>
	<select id="myOrderList" parameterType="Main" resultType="Course">
		SELECT 	DATA.* 
		FROM 	(
					<include refid="myOrderQuery" />
				) DATA 
		LIMIT #{limitStart},#{limitUnit}
	</select>	        
	<select id="myOrderTotal" parameterType="Main" resultType="Course">
		SELECT 	COUNT(*) CNT
		FROM	(
			<include refid="myOrderQuery" />
				) DATA
	</select>	
	
	<sql id="myPointQuery">
		SELECT 	A.*,
				@ROWNUM := @ROWNUM + 1 ROWNUM
		FROM	(
					SELECT 	*
					FROM	(
								SELECT 	A.POINT_DATE
										,DATE_FORMAT(A.POINT_DATE,'%Y-%m-%d') POINT_DATE_STR
										,DATE_FORMAT(A.VALID_DATE,'%Y-%m-%d') VALID_DATE_STR
										,CASE WHEN IN_POINT > 0 THEN IN_POINT ELSE OUT_POINT * -1 END POINT
										,A.POINT_CODE
										,( SELECT POINT_NAME FROM POINT_CODE WHERE POINT_CODE = A.POINT_CODE ) POINT_NAME
                                        ,CC.COURSE_NAME
								FROM 	POINT A
											LEFT OUTER JOIN COURSE C ON C.COURSE_ID = A.REF_ID
                                            LEFT OUTER JOIN COURSE_CODE CC ON CC.COURSE_CODE = C.COURSE_CODE
								WHERE	A.USER_ID = #{userId}
								AND		A.USE_YN = 'Y'
								UNION 	ALL
								SELECT 	A.VALID_DATE
										,DATE_FORMAT(A.VALID_DATE,'%Y-%m-%d') POINT_DATE_STR
										,'' VALID_DATE_STR
										,(IN_POINT - IN_POINT_USE) * -1 POINT
										,'' POINT_CODE
										,'유효기간 만료' POINT_CODE
										,'' COURSE_NAME
								FROM 	POINT A
								WHERE	USER_ID = #{userId}
								AND		USE_YN = 'Y'
								AND		VALID_DATE <![CDATA[<]]> CURDATE() 
								AND		IN_POINT - IN_POINT_USE > 0 
							) A
<if test="searchMonth != null and searchMonth != ''">
					WHERE 	A.POINT_DATE BETWEEN DATE_ADD(CURDATE(), INTERVAL -${searchMonth} MONTH) AND CURDATE()
</if>					
					ORDER 	BY POINT_DATE DESC
				) A,
				(SELECT @ROWNUM := 0) NUM
	</sql>
	<select id="myPointList" parameterType="Main" resultType="HashMap">
		SELECT 	DATA.* 
		FROM 	(
					<include refid="myPointQuery" />
				) DATA 
		LIMIT #{limitStart},#{limitUnit}
	</select>	        
	<select id="myPointTotal" parameterType="Main" resultType="Main">
		SELECT 	COUNT(*) CNT
		FROM	(
			<include refid="myPointQuery" />
				) DATA
	</select>	
	
	<select id="myPointInfo" resultType="hashmap">
	<![CDATA[
		SELECT 	SUM(IN_POINT) IN_POINT 
				,SUM(OUT_POINT) OUT_POINT 
				,IFNULL(SUM(CASE WHEN VALID_DATE >= CURDATE() THEN IN_POINT - IN_POINT_USE ELSE 0 END), 0) REMAIN_POINT
				,IFNULL(SUM(CASE WHEN VALID_DATE >= CURDATE() AND VALID_DATE < DATE_ADD(CURDATE(),INTERVAL 1 MONTH) THEN IN_POINT - IN_POINT_USE ELSE 0 END), 0) DELETE_POINT
		FROM 	POINT 
		WHERE	USER_ID = #{userId}
		AND 	USE_YN = 'Y'
	]]>
	</select>

	<select id="myCounselLimit3" parameterType="Main" resultType="Counsel">
		SELECT 	SEQ,
		       	B.DD_VALUE CATEGORY_NAME,
		       	TITLE,
		       	CONTENTS,
		       	ANSWER,
		       	IF(ANSWER IS NULL,'X','O') ANSWER_YN,
		       	DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%Y-%m-%d') CREATE_DATE
		FROM 	COUNSEL A LEFT OUTER JOIN CODE B ON A.CATEGORY = B.DD_KEY AND B.DD_MAIN = 'FAQ_${compType}'
		WHERE 	USER_ID = #{userId}
		ORDER 	BY CREATE_DATE DESC
		LIMIT	3
	</select>	
	<select id="myQnaLimit3" parameterType="Main" resultType="Board">
		SELECT 	A.*,
		       	IF(ANSWER IS NULL,'X','O') ANSWER_YN,
		       	DATE_FORMAT(IFNULL(A.UPDATE_DATE,A.CREATE_DATE), '%Y-%m-%d') CREATE_DATE_STR,
		       	CD.COURSE_NAME,
		       	C.COURSE_ID,
		       	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
		        CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
				DATEDIFF(DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END),
										DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END)) + 1 C_PERIOD,
				CASE WHEN C.MOBILE_YN = 'Y' OR CM.RESPONSIVE_CONTENTS_YN = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
		FROM 	BOARD_QNA A
					JOIN COURSE C ON C.COURSE_ID = A.COURSE_ID
					JOIN COURSE_REGISTER CR ON CR.COURSE_ID = A.COURSE_ID AND CR.USER_ID = #{userId}
					JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
					JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
		WHERE 	A.COURSE_ID IN ( SELECT COURSE_ID FROM COURSE_REGISTER WHERE USER_ID = #{userId} )
		AND		A.USER_ID = #{userId}
		ORDER 	BY A.CREATE_DATE DESC
		LIMIT	3
	</select>	
	
	<sql id="myQnaQuery">
		SELECT 	A.*,
				@ROWNUM := @ROWNUM + 1 ROWNUM
		FROM	(
					SELECT 	A.*,
					       	IF(ANSWER IS NULL,'X','O') ANSWER_YN,
					       	DATE_FORMAT(IFNULL(A.UPDATE_DATE,A.CREATE_DATE), '%Y-%m-%d') CREATE_DATE_STR,
					       	CD.COURSE_NAME,
					       	CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE,
					        CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE,
							DATEDIFF(DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END),
													DATE(CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CR.CONFIRM_DATE,'%Y-%m-%d') END)) + 1 C_PERIOD,
							CASE WHEN C.MOBILE_YN = 'Y' OR CM.RESPONSIVE_CONTENTS_YN = 'Y' THEN 'Y' ELSE 'N' END MOBILE_YN
					FROM 	BOARD_QNA A
								JOIN COURSE C ON C.COURSE_ID = A.COURSE_ID
								JOIN COURSE_REGISTER CR ON CR.COURSE_ID = A.COURSE_ID AND CR.USER_ID = #{userId}
								JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
								JOIN COURSE_MASTER CM ON CM.COURSE_CODE = C.COURSE_CODE
					WHERE 	A.COURSE_ID IN ( SELECT COURSE_ID FROM COURSE_REGISTER WHERE USER_ID = #{userId} )
					AND		A.USER_ID = #{userId}
				) A,
				(SELECT @ROWNUM := 0) NUM
		ORDER 	BY CREATE_DATE DESC
	</sql>
	<select id="myQnaList" parameterType="Main" resultType="Board">
		SELECT 	DATA.* 
		FROM 	(
					<include refid="myQnaQuery" />
				) DATA 
		LIMIT #{limitStart},#{limitUnit}
	</select>	        
	<select id="myQnaTotal" parameterType="Main" resultType="Board">
		SELECT 	COUNT(*) CNT
		FROM	(
			<include refid="myQnaQuery" />
				) DATA
	</select>
	
	<select id="myQnaData" parameterType="Main" resultType="Board">
		SELECT 	A.*,
		       	DATE_FORMAT(IFNULL(A.UPDATE_DATE,A.CREATE_DATE), '%Y-%m-%d') CREATE_DATE_STR,
		       	CD.COURSE_NAME,
		       	IF(ANSWER IS NULL,'X','O') ANSWER_YN
		FROM 	BOARD_QNA A
					JOIN COURSE C ON C.COURSE_ID = A.COURSE_ID
					JOIN COURSE_CODE CD ON CD.COURSE_CODE = C.COURSE_CODE
		WHERE 	A.SEQ = #{seq}
    </select>

    <update id="myQnaUpd" parameterType="Main">
		UPDATE BOARD_QNA
		   SET TITLE = #{title},
		       CONTENTS = #{contents},
		       UPDATE_DATE = CURRENT_TIMESTAMP
		 WHERE SEQ = #{seq}
    </update>

    <delete id="myQnaDel" parameterType="Main">
		DELETE FROM BOARD_QNA
		 WHERE SEQ = #{seq}
    </delete>

	<select id="myCertificate" parameterType="Main" resultType="hashmap">
		SELECT	CC.COURSE_NAME
				,U.USER_NAME
		        ,A.COURSE_CODE
		        ,LPAD(CE.CERTIFICATE_NO, 5, '0') CERTIFICATE_NO
		        ,(	SELECT 	COUNT(*) 
					FROM	COURSE_RESOURCE
		            WHERE 	COURSE_CODE = A.COURSE_CODE ) STUDY_HOUR
				,DATE_FORMAT(CURDATE(),'%Y년 %m월 %d일') CERTIFICATE_DATE
				,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_FROM ELSE DATE_FORMAT(CURDATE(),'%Y.%m.%d') END C_FROM_DATE
				,CASE WHEN A.TERM_YN = 'Y' THEN A.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(CR.CONFIRM_DATE,INTERVAL A.C_PERIOD DAY),'%Y.%m.%d') END  C_TO_DATE
				,CE.COMPLETE_YN
		FROM 	COURSE A
					JOIN COURSE_CODE CC ON CC.COURSE_CODE = A.COURSE_CODE
					JOIN COURSE_REGISTER CR ON CR.COURSE_ID = A.COURSE_ID AND CR.USER_ID = #{userId}
					JOIN COURSE_EVAL CE ON CE.COURSE_ID = A.COURSE_ID AND CE.USER_ID =  #{userId}
		            JOIN USER U ON U.USER_ID = CE.USER_ID
		WHERE  	A.COURSE_ID = #{courseId}
    </select>     	    

	<select id="myReceipt" parameterType="Main" resultType="hashmap">
		SELECT	CC.COURSE_NAME
				,U.USER_NAME
                ,CR.COURSE_COST
				,DATE_FORMAT(CR.CONFIRM_DATE,'%Y. %m. %d') CONFIRM_DATE
		FROM 	COURSE A
					JOIN COURSE_CODE CC ON CC.COURSE_CODE = A.COURSE_CODE
					JOIN COURSE_REGISTER CR ON CR.COURSE_ID = A.COURSE_ID AND CR.USER_ID = #{userId}
		            JOIN USER U ON U.USER_ID = CR.USER_ID
		WHERE  	A.COURSE_ID = #{courseId}
    </select>     	    

	<select id="pchMainInfo" parameterType="Main" resultType="hashmap">
		SELECT 	CASE WHEN IFNULL(A.GRADE, 0) > 0 AND IFNULL(A.GRADE, 0) <![CDATA[<=]]> 0.5 THEN 'star_half'
					 WHEN IFNULL(A.GRADE, 0) > 0.5 THEN 'star_active'
					 ELSE 'star_inactive' END GRADE1
				,CASE WHEN IFNULL(A.GRADE, 0) > 1 AND IFNULL(A.GRADE, 0) <![CDATA[<=]]> 1.5 THEN 'star_half'
					 WHEN IFNULL(A.GRADE, 0) > 1.5 THEN 'star_active'
					 ELSE 'star_inactive' END GRADE2
				,CASE WHEN IFNULL(A.GRADE, 0) > 2 AND IFNULL(A.GRADE, 0) <![CDATA[<=]]> 2.5 THEN 'star_half'
					 WHEN IFNULL(A.GRADE, 0) > 2.5 THEN 'star_active'
					 ELSE 'star_inactive' END GRADE3
				,CASE WHEN IFNULL(A.GRADE, 0) > 3 AND IFNULL(A.GRADE, 0) <![CDATA[<=]]> 3.5 THEN 'star_half'
					 WHEN IFNULL(A.GRADE, 0) > 3.5 THEN 'star_active'
					 ELSE 'star_inactive' END GRADE4
				,CASE WHEN IFNULL(A.GRADE, 0) > 4 AND IFNULL(A.GRADE, 0) <![CDATA[<=]]> 4.5 THEN 'star_half'
					 WHEN IFNULL(A.GRADE, 0) > 4.5 THEN 'star_active'
					 ELSE 'star_inactive' END GRADE5
				,ROUND(A.GRADE, 1) GRADE
		        ,(
					SELECT  COUNT(*)
					FROM	COURSE
					WHERE	COMP_CD = #{compCd}
		            AND		OPEN_YN = 'Y'
		            AND 	CLOSE_YN = 'N' ) COURSE_CNT
		FROM 	(            
					SELECT	IFNULL(AVG(EVAL), 0) GRADE
							,COUNT(*) GRADE_CNT
					FROM 	POSTSCRIPT
					WHERE	COURSE_ID IN ( SELECT COURSE_ID FROM COURSE WHERE COMP_CD = #{compCd} )
				) A
    </select>

	<select id="talkNewTalkCnt" parameterType="Main" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM	TALK_DETAIL A
		WHERE	A.TALK_ID = #{talkId}
		AND 	A.CREATE_DATE > ( SELECT LAST_VIEW_DATE FROM TALK WHERE TALK_ID = #{talkId} AND USER_ID = #{userId} );
    </select>
    
	<select id="talkList" parameterType="Main" resultType="hashmap">
		SELECT 	A.*
				,U.USER_NAME
		        ,DATE_FORMAT(A.CREATE_DATE,'%H:%i') CREATE_DATE_STR
		        ,CASE WHEN DATE_FORMAT(A.CREATE_DATE,'%p') = 'AM' THEN '오전' ELSE '오후' END AM_PM
		        ,CASE WHEN A.USER_ID = #{userId} THEN 'Y' ELSE 'N' END MY_YN
		        ,CASE WHEN A.USER_ID = B.USER_ID THEN 'Y' ELSE 'N' END TEACHER_YN
                ,CONCAT(SUBSTR(A.USER_ID,1,3),'**') USER_ID5
                ,DATE_FORMAT(A.CREATE_DATE,'%Y.%m.%d') DATE_STR
                ,DATE_FORMAT(A.CREATE_DATE,'%Y_%m_%d') DATE_STR_ID
		FROM	(
					SELECT 	A.*
					FROM	TALK_DETAIL A
					WHERE	A.TALK_ID = #{talkId}
					ORDER 	BY SEQ DESC
					LIMIT	30
				) A LEFT OUTER JOIN USER U ON U.USER_ID = A.USER_ID
					JOIN ( SELECT C2C_USER_ID USER_ID FROM COMPANY WHERE COMP_CD = #{talkId} ) B ON 1 = 1
		ORDER	BY A.CREATE_DATE ASC
    </select>
    
	<select id="talkNextList" parameterType="Main" resultType="hashmap">
		SELECT 	A.*
				,U.USER_NAME
		        ,DATE_FORMAT(A.CREATE_DATE,'%H:%i') CREATE_DATE_STR
		        ,CASE WHEN DATE_FORMAT(A.CREATE_DATE,'%p') = 'AM' THEN '오전' ELSE '오후' END AM_PM
		        ,CASE WHEN A.USER_ID = #{userId} THEN 'Y' ELSE 'N' END MY_YN
		        ,CASE WHEN A.USER_ID = B.USER_ID THEN 'Y' ELSE 'N' END TEACHER_YN
                ,CONCAT(SUBSTR(A.USER_ID,1,3),'**') USER_ID5
                ,DATE_FORMAT(A.CREATE_DATE,'%Y.%m.%d') DATE_STR
                ,DATE_FORMAT(A.CREATE_DATE,'%Y_%m_%d') DATE_STR_ID
		FROM	TALK_DETAIL A
					LEFT OUTER JOIN USER U ON U.USER_ID = A.USER_ID
					JOIN ( SELECT C2C_USER_ID USER_ID FROM COMPANY WHERE COMP_CD = #{talkId} ) B ON 1 = 1
		WHERE	A.TALK_ID = #{talkId}
		AND		A.SEQ > #{seq}
		ORDER 	BY CREATE_DATE
    </select>
    
	<select id="talkPrevList" parameterType="Main" resultType="hashmap">
		SELECT 	A.*
				,U.USER_NAME
		        ,DATE_FORMAT(A.CREATE_DATE,'%H:%i') CREATE_DATE_STR
		        ,CASE WHEN DATE_FORMAT(A.CREATE_DATE,'%p') = 'AM' THEN '오전' ELSE '오후' END AM_PM
		        ,CASE WHEN A.USER_ID = #{userId} THEN 'Y' ELSE 'N' END MY_YN
		        ,CASE WHEN A.USER_ID = B.USER_ID THEN 'Y' ELSE 'N' END TEACHER_YN
                ,CONCAT(SUBSTR(A.USER_ID,1,3),'**') USER_ID5
                ,DATE_FORMAT(A.CREATE_DATE,'%Y.%m.%d') DATE_STR
                ,DATE_FORMAT(A.CREATE_DATE,'%Y_%m_%d') DATE_STR_ID
		FROM	(
					SELECT 	A.*
					FROM	TALK_DETAIL A
					WHERE	A.TALK_ID = #{talkId}
					AND		A.SEQ <![CDATA[<]]> #{seq}
					ORDER 	BY SEQ DESC
					LIMIT	2
				) A LEFT OUTER JOIN USER U ON U.USER_ID = A.USER_ID
					JOIN ( SELECT C2C_USER_ID USER_ID FROM COMPANY WHERE COMP_CD = #{talkId} ) B ON 1 = 1
    </select>

	<insert id="talkIns" parameterType="Main">
		INSERT INTO TALK_DETAIL ( TALK_ID, CREATE_DATE, CONTENTS, USER_ID )
		VALUES ( #{talkId}, CURRENT_TIMESTAMP, #{contents}, #{userId} )
 	</insert>

	<update id="talkLastViewDateUpd" parameterType="Main">
		UPDATE	TALK
		SET		LAST_VIEW_DATE = CURRENT_TIMESTAMP
		WHERE 	TALK_ID = #{talkId}
		AND		USER_ID = #{userId}
	</update>
</mapper>