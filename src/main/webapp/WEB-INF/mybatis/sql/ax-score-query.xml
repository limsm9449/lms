<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="axScore">

	<select id="axScoreList" parameterType="hashmap" resultType="hashmap">
		SELECT 	CAT.CATEGORY_NAME
				,A.COURSE_ID
				,A.COURSE_CODE
				,B.COURSE_NAME
				,A.YEAR
				,A.MONTH
				,A.CHASU
				,A.COMP_CD
				,IFNULL(C.REPORT_CNT,0) REPORT_CNT
				,IFNULL(C.EXAM_CNT,0) EXAM_CNT
				,IFNULL(C.DISCUSSION_CNT,0) DISCUSSION_CNT
				,IFNULL(C.PROGRESS_CNT,0) PROGRESS_CNT
				,IFNULL(C.TOTAL_CNT,0) TOTAL_CNT
				,IFNULL(C.REPORT_SUBMIT_CNT,0) REPORT_SUBMIT_CNT
				,IFNULL(D.QUEST_CNT,0) QUEST_CNT
				,IFNULL(E.CNT, 0) USER_CNT                
				,IFNULL(F.TOTAL_RATIO,0) TOTAL_RATIO
				,IFNULL(F.WEEK_RATIO,0) WEEK_RATIO 
		        ,IFNULL(A.REPORT_RATE,0) REPORT_RATE
		        ,IFNULL(A.DISCUSSION_RATE,0) DISCUSSION_RATE
                ,IFNULL(A.TERM_YN,'N') TERM_YN
                ,IFNULL(A.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(A.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
		       	,CASE WHEN A.TERM_YN = 'Y' THEN
							DATEDIFF(DATE(A.STUDY_PERIOD_TO), DATE(A.STUDY_PERIOD_FROM)) + 1
						ELSE
							A.C_PERIOD
						END C_PERIOD
		FROM 	COURSE A 
		                LEFT OUTER JOIN COURSE_CODE B ON B.COURSE_CODE = A.COURSE_CODE
						LEFT OUTER JOIN (
							SELECT 	C3.CODE C3_CODE, C2.CODE C2_CODE, C1.CODE C1_CODE,
									CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
							FROM 	CATEGORY C3 
										LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									  	LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							WHERE 	C3.DEPTH = 3) CAT ON B.CODE = CAT.C3_CODE
						LEFT OUTER JOIN (
							SELECT 	A.COURSE_ID
									,SUM(IF(B.REPORT > 0,1,0)) REPORT_CNT
									,SUM(IF(B.EXAM > 0,1,0)) EXAM_CNT 
									,SUM(IF(B.DISCUSSION > 0,1,0)) DISCUSSION_CNT
									,SUM(IF(B.PROGRESS > 0,1,0)) PROGRESS_CNT
									,COUNT(*) TOTAL_CNT
									,SUM(IF(B.REPORT_YN = 'Y',1,0)) REPORT_SUBMIT_CNT
							FROM	COURSE_REGISTER A
										LEFT OUTER JOIN COURSE_EVAL B ON B.COURSE_ID = A.COURSE_ID AND B.USER_ID = A.USER_ID
							WHERE 	A.STATUS = 'A'
							GROUP 	BY A.COURSE_ID ) C ON C.COURSE_ID = A.COURSE_ID
						LEFT OUTER JOIN (
							SELECT  COURSE_ID, COUNT(USER_ID) QUEST_CNT
		                    FROM 	(
										SELECT 	COURSE_ID, USER_ID, COUNT(*) CNT
										FROM	USER_QUEST
		                                WHERE 	ANSWER IS NOT NULL
										GROUP BY COURSE_ID, USER_ID
									) A
							WHERE	CNT > 0
							GROUP 	BY COURSE_ID ) D ON D.COURSE_ID = A.COURSE_ID     
	                     LEFT OUTER JOIN (
	                     	SELECT  COURSE_ID,
	                     			COUNT(*) CNT
	                     	FROM	COURSE_REGISTER
	                     	WHERE	STATUS = 'A'
	                     	GROUP 	BY COURSE_ID ) E ON E.COURSE_ID = A.COURSE_ID   
						LEFT OUTER JOIN COURSE_EXAM_TYPE F ON F.SEQ = A.COURSE_EXAM_TYPE_ID
						LEFT OUTER JOIN COMPANY G ON G.COMP_CD = A.COMP_CD 
		WHERE 	IFNULL(A.OPEN_YN,'N') = 'Y'
<if test="LEVEL1_CODE != null and LEVEL1_CODE != ''"> AND CAT.C1_CODE = #{LEVEL1_CODE}</if>
<if test="LEVEL2_CODE != null and LEVEL2_CODE != ''"> AND CAT.C2_CODE = #{LEVEL2_CODE}</if>
<if test="LEVEL3_CODE != null and LEVEL3_CODE != ''"> AND CAT.C3_CODE = #{LEVEL3_CODE}</if>
<if test="COMPANY != null and COMPANY == 'B2C'">
		AND 	IFNULL(A.COMP_CD,'B2C') = 'B2C'
</if>
<if test="COMPANY != null and COMPANY == 'B2B'">
		AND 	IFNULL(A.COMP_CD,'B2C') != 'B2C'
		AND 	IFNULL(G.C2C_YN,'N') = 'N'
</if>
<if test="COMPANY != null and COMPANY == 'C2C'">
		AND 	IFNULL(A.COMP_CD,'B2C') != 'B2C'
		AND 	IFNULL(G.C2C_YN,'N') = 'Y'
</if>
<if test="COMPANY2 != null and COMPANY2 != ''">
		AND 	IFNULL(A.COMP_CD,'B2C') = #{COMPANY2}
</if>
<if test="CLOSE != null and CLOSE != ''">
		AND 	IFNULL(A.CLOSE_YN,'N') = #{CLOSE} 
</if>
<if test="YEAR != null and YEAR != ''">
		AND		A.YEAR = #{YEAR}
</if>
<if test="MONTH != null and MONTH != ''">
		AND		A.MONTH = #{MONTH}
</if>
<if test="chasu != null and chasu != ''">
		AND		A.CHASU = #{chasu}
</if>
<if test="courseName != null and courseName != ''"> 
		AND ( UPPER(A.COURSE_CODE) LIKE CONCAT('%',UPPER(#{courseName}),'%') OR UPPER(B.COURSE_NAME) LIKE CONCAT('%',UPPER(#{courseName}),'%') )
</if>		
<if test="SESSION_AUTH == 'TUTOR'"> 
		AND ( A.TUTOR_ID = #{SESSION_USER_ID} OR A.COURSE_ID IN (SELECT COURSE_ID FROM COURSE_TUTOR WHERE TUTOR_ID = #{SESSION_USER_ID} AND USE_YN = 'Y') )
</if>	
<if test="SESSION_AUTH == 'SITE_MANAGER'"> 
 	  	AND A.COMP_CD = (SELECT COMP_CD FROM USER WHERE USER_ID = #{SESSION_USER_ID})
</if>		
		ORDER 	BY CAT.CATEGORY_NAME,B.COURSE_NAME,A.YEAR,A.MONTH,A.CHASU  
	</select>
        
	<select id="axUserScoreList" resultType="hashmap">
		SELECT 	B.COURSE_ID
				,B.USER_ID
		        ,U.USER_NAME
		        ,B.REPORT
		        ,IFNULL(B.EXAM_TOTAL,0) EXAM_TOTAL
		        ,IFNULL(B.EXAM_WEEK,0) EXAM_WEEK
		        ,IFNULL(B.EXAM,0) EXAM
		        ,IFNULL(B.DISCUSSION,0) DISCUSSION
		        ,IFNULL(B.PROGRESS,0) PROGRESS
		        ,IFNULL(B.TOTAL,0) TOTAL
		        ,B.LAST_WEEK
		        ,B.LAST_PAGE
		        ,DATE_FORMAT(B.E_FROM_DATE, '%y.%m.%d %H:%i') E_FROM_DATE
		        ,DATE_FORMAT(B.E_TO_DATE, '%y.%m.%d %H:%i') E_TO_DATE
		        ,B.REPORT_YN
		        ,B.REPORT_TUTOR_YN
		        ,B.QUEST_YN
		        ,B.EXAM_YN
		        ,B.COMPLETE_YN
		        ,IF(C.REPORT_RATE > 0, 'Y', 'N') C_REPORT_YN
		        ,IF(C.DISCUSSION_RATE > 0, 'Y', 'N') C_DISCUSSION_YN
		        ,IFNULL(C.REPORT_RATE,0) REPORT_RATE
		        ,IFNULL(C.EXAM_RATE,0) EXAM_RATE
		        ,IFNULL(C.DISCUSSION_RATE,0) DISCUSSION_RATE
		        ,IFNULL(C.PROGRESS_RATE,0) PROGRESS_RATE
                ,IFNULL(F.TOTAL_RATIO,0) TOTAL_RATIO
				,IFNULL(F.WEEK_RATIO,0) WEEK_RATIO 
		        ,B.REPORT_SEQ
                ,C.COURSE_CODE
                ,IFNULL(E.EVAL, 0) EVAL
		       	,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_FROM ELSE DATE_FORMAT(A.CONFIRM_DATE,'%Y-%m-%d') END C_FROM_DATE
		        ,CASE WHEN C.TERM_YN = 'Y' THEN C.STUDY_PERIOD_TO ELSE DATE_FORMAT(DATE_ADD(A.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),'%Y-%m-%d') END  C_TO_DATE
				,CASE WHEN C.TERM_YN = 'Y' THEN
							DATEDIFF(DATE(C.STUDY_PERIOD_TO),CURDATE())
						ELSE
							DATEDIFF(DATE_ADD(A.CONFIRM_DATE,INTERVAL C.C_PERIOD DAY),CURDATE())
						END + 1 REMAIN_DAY
		FROM	COURSE_REGISTER A
					LEFT OUTER JOIN COURSE_EVAL B ON B.COURSE_ID = A.COURSE_ID AND B.USER_ID = A.USER_ID
		            LEFT OUTER JOIN USER U ON U.USER_ID = A.USER_ID
            		LEFT OUTER JOIN COURSE C ON C.COURSE_ID = A.COURSE_ID
					LEFT OUTER JOIN POSTSCRIPT E ON E.COURSE_ID = A.COURSE_ID AND E.USER_ID = A.USER_ID
					LEFT OUTER JOIN COURSE_EXAM_TYPE F ON F.SEQ = C.COURSE_EXAM_TYPE_ID
		WHERE 	A.STATUS = 'A'
		AND		A.COURSE_ID = #{COURSE_ID}
<if test="SEARCH_USER != null and SEARCH_USER != ''">
		AND 	( UPPER(B.USER_ID) LIKE CONCAT('%',UPPER(#{SEARCH_USER}),'%') OR UPPER(U.USER_NAME) LIKE CONCAT('%',UPPER(#{SEARCH_USER}),'%') )
</if>
<if test="SESSION_AUTH == 'TUTOR'"> 
		AND B.TUTOR_ID = #{SESSION_USER_ID}
</if>	
	</select>        
	
	<update id="axUserScoreUpdate" parameterType="hashmap">
    	UPDATE 	COURSE_EVAL
    	SET 	REPORT = #{REPORT},
    	       	DISCUSSION = #{DISCUSSION},
    	       	REPORT_SEQ = #{REPORT_SEQ}
    	 WHERE 	COURSE_ID = #{COURSE_ID}
    	 AND    USER_ID = #{USER_ID}
    </update>

	<update id="axUserScoreUpdateTotal" parameterType="hashmap">
    	UPDATE 	COURSE_EVAL
    	SET 	TOTAL = REPORT * ((SELECT REPORT_RATE FROM COURSE WHERE COURSE_ID = #{COURSE_ID}) / 100) +
						EXAM * ((SELECT EXAM_RATE FROM COURSE WHERE COURSE_ID = #{COURSE_ID}) / 100) +
						DISCUSSION * ((SELECT DISCUSSION_RATE FROM COURSE WHERE COURSE_ID = #{COURSE_ID}) / 100) +
						PROGRESS * ((SELECT PROGRESS_RATE FROM COURSE WHERE COURSE_ID = #{COURSE_ID}) / 100)
    	 WHERE 	COURSE_ID = #{COURSE_ID}
    	 AND    USER_ID = #{USER_ID}
    </update>
    
    <!-- 이수여부를 수정한다. -->
    <update id="axUserScoreUpdateComplete" parameterType="hashmap">
    <![CDATA[
		UPDATE COURSE_EVAL A
		   SET COMPLETE_YN = CASE WHEN IFNULL(REPORT, 0) < (SELECT REPORT_FAIL FROM COURSE WHERE COURSE_ID = A.COURSE_ID) OR 
		   								IFNULL(EXAM, 0) < (SELECT EXAM_FAIL FROM COURSE WHERE COURSE_ID = A.COURSE_ID) OR 
		   								IFNULL(DISCUSSION, 0) < (SELECT DISCUSSION_FAIL FROM COURSE WHERE COURSE_ID = A.COURSE_ID) OR 
		   								IFNULL(PROGRESS, 0) < (SELECT PROGRESS_FAIL FROM COURSE WHERE COURSE_ID = A.COURSE_ID) OR 
		   								IFNULL(TOTAL, 0) < (SELECT TOTAL_FAIL FROM COURSE WHERE COURSE_ID = A.COURSE_ID) THEN 'N' ELSE 'Y' END 
		 WHERE COURSE_ID = #{COURSE_ID}
		   AND USER_ID = #{USER_ID}
	]]>
    </update>

	<select id="axUserScoreWeekList" resultType="hashmap">
		SELECT 	A.COURSE_ID
				,A.USER_ID
		        ,U.USER_NAME
		        ,A.WEEK
                ,C.TITLE
                ,IFNULL(A.PROGRESS_RATE, 0) PROGRESS_RATE
		        ,DATE_FORMAT(A.STUDY_START, '%y.%m.%d %H:%i') STUDY_START
		        ,DATE_FORMAT(A.STUDY_END, '%y.%m.%d %H:%i') STUDY_END
		FROM	COURSE_WEEK A
					JOIN COURSE B ON B.COURSE_ID = A.COURSE_ID
                    JOIN COURSE_RESOURCE C ON C.COURSE_CODE = B.COURSE_CODE AND C.WEEK = A.WEEK
		            LEFT OUTER JOIN USER U ON U.USER_ID = A.USER_ID
		WHERE 	A.COURSE_ID = #{COURSE_ID}
		AND		A.USER_ID = #{USER_ID}
		ORDER 	BY A.WEEK
	</select>        

	<select id="axUserScoreWeekCount" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM	COURSE_WEEK
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</select>        

	<insert id="axUserScoreWeekInsert" parameterType="hashmap">
		INSERT 	INTO COURSE_WEEK( COURSE_ID, USER_ID, WEEK )
		SELECT  #{COURSE_ID} COURSE_ID, #{USER_ID} USER_ID, WEEK
		FROM 	COURSE_RESOURCE
		WHERE	COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{COURSE_ID})
	</insert>        
    
	<select id="axUserScoreExamList" resultType="hashmap">
		SELECT 	A.COURSE_ID
				,A.USER_ID
				,A.EXAM_KIND
				,A.WEEK
				,A.SEQ
				,C.TYPE
				,C.QUESTION
				,C.QA1
				,C.QA2
				,C.QA3
				,C.QA4
                ,CASE 	WHEN C.TYPE = 'J' THEN A.ANSWER
						ELSE CONCAT(A.ANSWER,'번') END ANSWER
                ,CASE 	WHEN C.TYPE = 'J' THEN C.ANSWER
						ELSE CONCAT(C.ANSWER,'번') END EXAM_ANSWER
		        ,A.ANSWER_YN
                ,DATE_FORMAT(A.CREATE_DATE, '%y.%m.%d %H:%i') CREATE_DATE
		FROM	USER_EXAM A
					JOIN COURSE B ON B.COURSE_ID = A.COURSE_ID
					JOIN COURSE_EXAM C ON C.COURSE_CODE = B.COURSE_CODE AND C.SEQ = A.SEQ
		WHERE 	A.COURSE_ID = #{COURSE_ID}
		AND		A.USER_ID = #{USER_ID}
		AND		A.EXAM_KIND = #{EXAM_KIND}
		ORDER 	BY A.WEEK, A.SEQ
	</select>        

	<select id="axUserScoreExamCount" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM	USER_EXAM
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
		AND		EXAM_KIND = #{EXAM_KIND}
	</select>        

	<select id="axUserScoreExamStandard" parameterType="hashmap" resultType="hashmap">
		SELECT 	WEEK_FROM
				,WEEK_TO
		        ,TYPE
		        ,LEVEL
		        ,QUESTION_CNT
		        ,EXAM_KIND
		        ,#{COURSE_ID} COURSE_ID
		        ,#{USER_ID} USER_ID
		FROM 	COURSE_EXAM_TYPE_STANDARD
		WHERE 	EXAM_TYPE_SEQ = (
						SELECT 	SEQ
						FROM 	COURSE_EXAM_TYPE
						WHERE   SEQ = (
								SELECT 	COURSE_EXAM_TYPE_ID
								FROM	COURSE 
								WHERE 	COURSE_ID = #{COURSE_ID}
							)
					)
		AND		EXAM_KIND = #{EXAM_KIND}    
		AND 	USE_YN = 'Y'
	</select>      
	
	<insert id="axUserScoreExamInsert" parameterType="hashmap">
		INSERT 	INTO USER_EXAM( COURSE_ID, USER_ID, EXAM_KIND, WEEK, SEQ, ANSWER, ANSWER_YN, CREATE_USER, CREATE_DATE )
		SELECT  #{COURSE_ID} COURSE_ID, #{USER_ID} USER_ID, #{EXAM_KIND}, #{WEEK_TO}, SEQ, '',  'N', #{SESSION_USER_ID}, CURRENT_TIMESTAMP
		FROM 	COURSE_EXAM
		WHERE	COURSE_CODE = (	SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{COURSE_ID})
		AND		USE_YN = 'Y'	
		AND		WEEK BETWEEN ${WEEK_FROM} AND ${WEEK_TO}
		AND	 	TYPE = #{TYPE}
		AND		LEVEL = #{LEVEL}
        AND	    SEQ NOT IN (SELECT SEQ FROM USER_EXAM WHERE COURSE_ID = #{COURSE_ID} AND USER_ID = #{USER_ID} AND EXAM_KIND = #{EXAM_KIND})
		ORDER 	BY RAND() 
		LIMIT 	${QUESTION_CNT}							
	</insert>   

	<update id="axUserScoreExamUpdate" parameterType="hashmap">
    	UPDATE 	USER_EXAM
    	SET 	ANSWER_YN = #{ANSWER_YN}
		       	,UPDATE_DATE = CURRENT_TIMESTAMP
		       	,UPDATE_USER = #{SESSION_USER_ID}
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
		AND		EXAM_KIND = #{EXAM_KIND}
		AND		SEQ = #{SEQ}
    </update>
    
    <delete id="axUserScoreExamDelete" parameterType="hashmap">
    	DELETE 	FROM USER_EXAM
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
		AND		EXAM_KIND = #{EXAM_KIND}
    </delete>

	<update id="axUserScoreExamInitialize" parameterType="hashmap">
    	UPDATE 	COURSE_EVAL
    	SET 	EXAM_TOTAL = 0
    			,EXAM_YN = 'N'
    			,E_FROM_DATE = NULL
				,E_TO_DATE = NULL
    	 WHERE 	COURSE_ID = #{COURSE_ID}
    	 AND    USER_ID = #{USER_ID}
    </update>

	<update id="axUserScoreExamUpdateExamTypeTotal" parameterType="hashmap">
    	UPDATE 	COURSE_EVAL
    	SET 	EXAM_WEEK = (SELECT 100 * ( SUM(IF(ANSWER_YN = 'Y',1,0)) / COUNT(*) ) FROM USER_EXAM WHERE COURSE_ID = #{COURSE_ID} AND USER_ID = #{USER_ID} AND EXAM_KIND = 'WEEK')
    			,EXAM_TOTAL = (SELECT 100 * ( SUM(IF(ANSWER_YN = 'Y',1,0)) / COUNT(*) ) FROM USER_EXAM WHERE COURSE_ID = #{COURSE_ID} AND USER_ID = #{USER_ID} AND EXAM_KIND = 'TOTAL')
    	 WHERE 	COURSE_ID = #{COURSE_ID}
    	 AND    USER_ID = #{USER_ID}
    </update>

	<update id="axUserScoreUpdateExamTotal" parameterType="hashmap">
    	UPDATE 	COURSE_EVAL
    	SET 	EXAM = IF((SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{COURSE_ID})) = 100,
    						EXAM_TOTAL,
    						IF((SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{COURSE_ID})) = 0,
    							EXAM_WEEK,
    							EXAM_WEEK * (SELECT WEEK_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{COURSE_ID}))  / 100 +
    							 EXAM_TOTAL * (SELECT TOTAL_RATIO FROM COURSE_EXAM_TYPE WHERE SEQ = (SELECT COURSE_EXAM_TYPE_ID FROM COURSE WHERE COURSE_ID = #{COURSE_ID}))  / 100
    						)  
    					)
    	 WHERE 	COURSE_ID = #{COURSE_ID}
    	 AND    USER_ID = #{USER_ID}
    </update>
    
	<select id="axUserScoreQuestList" resultType="hashmap">
		SELECT 	B.ORD
				,B.TYPE
				,B.QUESTION
				,B.QA1
				,B.QA2
				,B.QA3
				,B.QA4
                ,CASE 	WHEN B.TYPE = 'J' THEN A.ANSWER
						WHEN B.TYPE = 'G' THEN CONCAT(A.ANSWER,'번')
                		ELSE CONCAT(CASE WHEN A.ANSWER1 = 'Y' THEN '1번 ' ELSE '' END,
                					CASE WHEN A.ANSWER2 = 'Y' THEN '2번 ' ELSE '' END,  
                					CASE WHEN A.ANSWER3 = 'Y' THEN '3번 ' ELSE '' END,  
                					CASE WHEN A.ANSWER4 = 'Y' THEN '4번 ' ELSE '' END) END ANSWER 
		        ,DATE_FORMAT(A.CREATE_DATE, '%y.%m.%d %H:%i') CREATE_DATE
		        ,DATE_FORMAT(A.CREATE_DATE, '%y.%m.%d %H:%i') CREATE_DATE
		FROM	USER_QUEST A
					JOIN QUEST B ON B.QG_ID = A.QG_ID AND B.SEQ = A.SEQ
		WHERE 	A.COURSE_ID = #{COURSE_ID}
		AND		A.USER_ID = #{USER_ID}
		ORDER 	BY B.ORD
	</select>        

	<select id="axUserScoreQuestCount" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*) CNT
		FROM	USER_QUEST
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</select>        

	<insert id="axUserScoreQuestInsert" parameterType="hashmap">
		INSERT 	INTO USER_QUEST( COURSE_ID, USER_ID, QG_ID, SEQ, ANSWER, CREATE_DATE )
		SELECT  #{COURSE_ID} COURSE_ID, #{USER_ID} USER_ID, QG_ID, SEQ, '', CURRENT_TIMESTAMP
		FROM 	QUEST
		WHERE	QG_ID = (	SELECT 	QG_ID
							FROM	COURSE_CODE
							WHERE	COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{COURSE_ID} ) )
		AND		USE_YN = 'Y'							
	</insert>   
	
	<select id="axUserScoreQuestOne" resultType="hashmap">
		SELECT 	CONTENTS
		FROM	POSTSCRIPT
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</select>        

	<update id="courseRegisterReset" parameterType="hashmap">
		UPDATE 	COURSE_REGISTER
		SET		CONFIRM_DATE = CURRENT_TIMESTAMP
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</update>

	<update id="courseEvalReset" parameterType="hashmap">
		UPDATE 	COURSE_EVAL
		SET		REPORT = 0
				,EXAM = 0
				,DISCUSSION = 0
				,PROGRESS = 0
				,TOTAL = 0
				,LAST_WEEK = 1
				,LAST_PAGE = 1
				,EXAM_WEEK = 0
				,EXAM_TOTAL = 0
				,CREATE_DATE = CURRENT_TIMESTAMP
				,E_FROM_DATE = NULL
				,E_TO_DATE = NULL
				,REPORT_YN = 'N'
				,REPORT_USER_CONTENTS = ''
				,REPORT_TUTOR_YN = 'N'
				,REPORT_TUTOR_CONTENTS = ''
				,QUEST_YN = 'N'
				,EXAM_YN = 'N'
				,COMPLETE_YN = 'N'
				,POSTSCRIPT_YN = 'N'
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</update>

	<update id="courseWeekReset" parameterType="hashmap">
		UPDATE 	COURSE_WEEK
		SET		PROGRESS_RATE = 0
				,STUDY_START = NULL
				,STUDY_END = NULL
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</update>    

	<delete id="courseWeekPageReset" parameterType="hashmap">
		DELETE 	FROM COURSE_WEEK_PAGE
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</delete>    

	<delete id="postscriptReset" parameterType="hashmap">
		DELETE 	FROM POSTSCRIPT
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</delete>    

	<delete id="userExamReset" parameterType="hashmap">
		DELETE 	FROM USER_EXAM
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</delete>    

	<delete id="userQuestReset" parameterType="hashmap">
		DELETE 	FROM USER_QUEST
		WHERE 	COURSE_ID = #{COURSE_ID}
		AND		USER_ID = #{USER_ID}
	</delete>    

	
</mapper>

