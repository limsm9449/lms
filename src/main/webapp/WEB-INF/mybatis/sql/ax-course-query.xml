<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="axCourse">
	
	<select id="axCourseList" parameterType="hashmap" resultType="hashmap">
	    SELECT 	C.CATEGORY_NAME
	           	,A.COURSE_ID
		       	,A.COURSE_CODE
		       	,B.COURSE_NAME
               	,A.YEAR
				,A.MONTH
		       	,IFNULL(A.CHASU, 0) CHASU
               	,A.COMP_CD
		       	,A.TUTOR_ID
		       	,A.COURSE_COST
		       	,A.C_PERIOD
		       	,A.OPEN_YN
		       	,A.OPEN_CLOSE_YN
               	,A.REPORT_RATE
				,A.EXAM_RATE
				,A.DISCUSSION_RATE
				,A.PROGRESS_RATE
                ,A.COURSE_EXAM_TYPE_ID
                ,F.TYPE_NAME COURSE_EXAM_TYPE_NAME
                ,IFNULL(A.TERM_YN,'N') TERM_YN
                ,IFNULL(A.TERM_PERIOD_FROM, '') TERM_PERIOD_FROM
                ,IFNULL(A.TERM_PERIOD_TO, '') TERM_PERIOD_TO
                ,IFNULL(A.STUDY_PERIOD_FROM, '') STUDY_PERIOD_FROM
                ,IFNULL(A.STUDY_PERIOD_TO, '') STUDY_PERIOD_TO
                ,A.REPORT_FAIL
                ,A.EXAM_FAIL
                ,A.DISCUSSION_FAIL
                ,A.PROGRESS_FAIL
                ,A.TOTAL_FAIL
                ,IFNULL(A.CLOSE_YN, 'N') CLOSE_YN
				,DATE_FORMAT(IFNULL(A.UPDATE_DATE, A.CREATE_DATE), '%y.%m.%d %H:%i') LAST_UPDATE_DATE
				,IFNULL(U2.USER_NAME, U1.USER_NAME) LAST_UPDATE_USER
				,IFNULL(G.CNT, 0) TUTOR_CNT
				,IFNULL(H.CNT, 0) USER_CNT
				,IFNULL(H.B_CNT, 0) B_USER_CNT
				,IFNULL(H.Y_CNT, 0) Y_USER_CNT
				,IFNULL(H.W_CNT, 0) W_USER_CNT
				,IFNULL(A.MOBILE_YN, 'N') MOBILE_YN
				,'N' NEW_FLAG
				,IFNULL(A.STUDY_MAX_WEEK, 0) STUDY_MAX_WEEK
				,IFNULL(A.QUEST_PROGRESS_RATIO, 0) QUEST_PROGRESS_RATIO
				,IFNULL(A.AGAIN_STUDY_DAY, 0) AGAIN_STUDY_DAY
				,IFNULL(A.WORKER_CARD_YN, 'N') WORKER_CARD_YN
				,IFNULL(A.SUPPORT_EMPLOYER_YN, 'N') SUPPORT_EMPLOYER_YN
				,IFNULL(A.NORMAL_COURSE_YN, 'N') NORMAL_COURSE_YN
				,IFNULL(J.OFFLINE_YN, 'N') OFFLINE_YN
                ,IFNULL(A.EVENT_POINT_FROM, '') EVENT_POINT_FROM
                ,IFNULL(A.EVENT_POINT_TO, '') EVENT_POINT_TO
                ,IFNULL(A.EVENT_POINT, 0) EVENT_POINT
                ,IFNULL(A.EVENT_POINT_MONTH, 0) EVENT_POINT_MONTH
		  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		                LEFT OUTER JOIN (
							   SELECT C3.CODE C3_CODE, C2.CODE C2_CODE, C1.CODE C1_CODE,
									  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
								 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							    WHERE C3.DEPTH = 3) C ON B.CODE = C.C3_CODE
						LEFT OUTER JOIN COURSE_EXAM_TYPE F ON F.SEQ = A.COURSE_EXAM_TYPE_ID
	                    LEFT OUTER JOIN USER U1 ON A.CREATE_USER = U1.USER_ID
		  	            LEFT OUTER JOIN USER U2 ON A.UPDATE_USER = U2.USER_ID  
		  	            LEFT OUTER JOIN (
		  	            	SELECT 	COURSE_ID, COUNT(*) CNT
		  	            	FROM	COURSE_TUTOR
		  	            	WHERE 	USE_YN = 'Y'
		  	            	GROUP	BY COURSE_ID ) G ON G.COURSE_ID = A.COURSE_ID       
	                     LEFT OUTER JOIN (
	                     	SELECT  COURSE_ID,
	                     			SUM(CASE WHEN STATUS = 'A' THEN 1 ELSE 0 END) CNT,
	                     			SUM(CASE WHEN STATUS = 'B' THEN 1 ELSE 0 END) B_CNT,
	                     			SUM(CASE WHEN STATUS = 'Y' THEN 1 ELSE 0 END) Y_CNT,
	                     			SUM(CASE WHEN STATUS = 'A' AND IFNULL(APPROVAL_ID, 0) = 0 THEN 1 ELSE 0 END) W_CNT
	                     	FROM	COURSE_REGISTER
	                     	GROUP 	BY COURSE_ID ) H ON H.COURSE_ID = A.COURSE_ID        
		  	            LEFT OUTER JOIN COMPANY I ON I.COMP_CD = A.COMP_CD  
		  	            LEFT OUTER JOIN COURSE_MASTER J ON A.COURSE_CODE = J.COURSE_CODE
		WHERE 	1 = 1
		   <if test="LEVEL1_CODE != null and LEVEL1_CODE != ''"> AND C.C1_CODE = #{LEVEL1_CODE}</if>
		   <if test="LEVEL2_CODE != null and LEVEL2_CODE != ''"> AND C.C2_CODE = #{LEVEL2_CODE}</if>
		   <if test="LEVEL3_CODE != null and LEVEL3_CODE != ''"> AND C.C3_CODE = #{LEVEL3_CODE}</if>
<if test="COMPANY != null and COMPANY == 'B2C'">
		AND 	IFNULL(A.COMP_CD,'B2C') = 'B2C'
</if>
<if test="COMPANY != null and COMPANY == 'B2B'">
		AND 	IFNULL(A.COMP_CD,'B2C') != 'B2C'
		AND 	IFNULL(I.C2C_YN,'N') = 'N'
</if>
<if test="COMPANY != null and COMPANY == 'C2C'">
		AND 	IFNULL(A.COMP_CD,'B2C') != 'B2C'
		AND 	IFNULL(I.C2C_YN,'N') = 'Y'
</if>
<if test="COMPANY2 != null and COMPANY2 != ''">
		AND 	IFNULL(A.COMP_CD,'B2C') = #{COMPANY2}
</if>
<if test="OPEN_KIND != null and OPEN_KIND == 'OPEN'">
		AND 	IFNULL(A.OPEN_YN,'N') IN ('Y')
</if>
<if test="OPEN_KIND != null and OPEN_KIND == 'NOT_OPEN'">
		AND 	IFNULL(A.OPEN_YN,'N') IN ('N')
</if>
<if test="OPEN_KIND != null and OPEN_KIND == 'CLOSE'">
		AND 	IFNULL(A.OPEN_YN,'N') IN ('Y')
		AND 	IFNULL(A.CLOSE_YN,'N') IN ('Y')
</if>
<if test="OPEN_KIND != null and OPEN_KIND == 'NOT_CLOSE'">
		AND 	IFNULL(A.OPEN_YN,'N') IN ('Y')
		AND 	IFNULL(A.CLOSE_YN,'N') IN ('N')
</if>
<if test="YEAR != null and YEAR != ''">
		AND		A.YEAR = #{YEAR}
</if>
<if test="MONTH != null and MONTH != ''">
		AND		A.MONTH = #{MONTH}
</if>
<if test="chasu != null and chasu != ''">
		AND		A.CHASU = #{chasu}
</if>
<if test="courseName != null and courseName != ''"> 
		AND ( UPPER(A.COURSE_CODE) LIKE CONCAT('%',UPPER(#{courseName}),'%') OR UPPER(B.COURSE_NAME) LIKE CONCAT('%',UPPER(#{courseName}),'%') )
</if>	
<if test="SESSION_AUTH == 'TUTOR'"> 
		AND ( A.TUTOR_ID = #{SESSION_USER_ID} OR A.COURSE_ID IN (SELECT COURSE_ID FROM COURSE_TUTOR WHERE TUTOR_ID = #{SESSION_USER_ID} AND USE_YN = 'Y') )
</if>	
<if test="SESSION_AUTH == 'TEACHER'"> 
		AND B.TEACHER_ID = #{SESSION_USER_ID}
</if>	
<if test="SESSION_AUTH == 'SITE_MANAGER'"> 
 	  	AND A.COMP_CD = (SELECT COMP_CD FROM USER WHERE USER_ID = #{SESSION_USER_ID})
</if>		
<if test="SESSION_AUTH == 'CONTENTS_MANAGER'"> 
 	  	AND B.CONTENTS_MANAGER_ID = #{SESSION_USER_ID}
</if>		
	 ORDER BY C.CATEGORY_NAME,B.COURSE_NAME,A.YEAR,A.MONTH,A.CHASU  
	</select>
   
	<insert id="axCourseInsert" parameterType="hashMap">
		INSERT INTO COURSE(COURSE_CODE, YEAR, MONTH, CHASU, COURSE_COST, TUTOR_ID, COMP_CD, 
					REPORT_RATE, EXAM_RATE, DISCUSSION_RATE, PROGRESS_RATE, OPEN_YN, C_PERIOD,  
					COURSE_EXAM_TYPE_ID, TERM_YN, TERM_PERIOD_FROM, TERM_PERIOD_TO, STUDY_PERIOD_FROM, STUDY_PERIOD_TO, 
					REPORT_FAIL, EXAM_FAIL, DISCUSSION_FAIL, PROGRESS_FAIL, TOTAL_FAIL, CREATE_DATE, CREATE_USER,
					LEARING_GOAL, LEARING_CONTENT, EVAL_METHOD, LEARING_TARGET, LEARING_COST, CLOSE_YN, 
					MOBILE_YN,  STUDY_MAX_WEEK, QUEST_PROGRESS_RATIO, AGAIN_STUDY_DAY,
					WORKER_CARD_YN, SUPPORT_EMPLOYER_YN, NORMAL_COURSE_YN, OPEN_CLOSE_YN, OFFLINE_DESC )
		VALUES (#{COURSE_CODE}, DATE_FORMAT(NOW(), '%Y'), DATE_FORMAT(NOW(), '%m'), #{CHASU},#{COURSE_COST}, #{TUTOR_ID}, #{COMP_CD}, 
					#{REPORT_RATE}, #{EXAM_RATE}, #{DISCUSSION_RATE}, #{PROGRESS_RATE}, #{OPEN_YN}, #{C_PERIOD},  
					#{COURSE_EXAM_TYPE_ID}, #{TERM_YN}, #{TERM_PERIOD_FROM}, #{TERM_PERIOD_TO}, #{STUDY_PERIOD_FROM}, #{STUDY_PERIOD_TO}, 
					#{REPORT_FAIL}, #{EXAM_FAIL}, #{DISCUSSION_FAIL}, #{PROGRESS_FAIL}, #{TOTAL_FAIL},CURRENT_TIMESTAMP, #{SESSION_USER_ID},
					#{LEARING_GOAL}, #{LEARING_CONTENT}, #{EVAL_METHOD}, #{LEARING_TARGET}, #{LEARING_COST}, 'N', 
					#{MOBILE_YN}, #{STUDY_MAX_WEEK}, #{QUEST_PROGRESS_RATIO}, #{AGAIN_STUDY_DAY},
					#{WORKER_CARD_YN}, #{SUPPORT_EMPLOYER_YN}, #{NORMAL_COURSE_YN}, #{OPEN_CLOSE_YN}, #{OFFLINE_DESC} )
	</insert>
	
	<update id="axCourseUpdate" parameterType="hashMap">
		UPDATE 	COURSE
		   SET 	COURSE_COST = #{COURSE_COST}
				,TUTOR_ID = #{TUTOR_ID}
				,COMP_CD = #{COMP_CD}
				,REPORT_RATE = #{REPORT_RATE}
				,EXAM_RATE = #{EXAM_RATE}
				,DISCUSSION_RATE = #{DISCUSSION_RATE}
				,PROGRESS_RATE = #{PROGRESS_RATE}
				,OPEN_YN = #{OPEN_YN}
				,C_PERIOD = #{C_PERIOD}
				,COURSE_EXAM_TYPE_ID = #{COURSE_EXAM_TYPE_ID}
				,TERM_YN = #{TERM_YN}
				,TERM_PERIOD_FROM = #{TERM_PERIOD_FROM}
				,TERM_PERIOD_TO = #{TERM_PERIOD_TO}
				,STUDY_PERIOD_FROM = #{STUDY_PERIOD_FROM}
				,STUDY_PERIOD_TO = #{STUDY_PERIOD_TO}
				,REPORT_FAIL = #{REPORT_FAIL}
				,EXAM_FAIL = #{EXAM_FAIL}
				,DISCUSSION_FAIL = #{DISCUSSION_FAIL}
				,PROGRESS_FAIL = #{PROGRESS_FAIL}
				,TOTAL_FAIL = #{TOTAL_FAIL}
				,CLOSE_YN = #{CLOSE_YN}
				,MOBILE_YN = #{MOBILE_YN}
				,STUDY_MAX_WEEK = #{STUDY_MAX_WEEK}
				,QUEST_PROGRESS_RATIO = #{QUEST_PROGRESS_RATIO}
				,AGAIN_STUDY_DAY = #{AGAIN_STUDY_DAY}
				,WORKER_CARD_YN = #{WORKER_CARD_YN}
				,SUPPORT_EMPLOYER_YN = #{SUPPORT_EMPLOYER_YN}
				,NORMAL_COURSE_YN = #{NORMAL_COURSE_YN}
				,OPEN_CLOSE_YN = #{OPEN_CLOSE_YN}
		       	,UPDATE_DATE = CURRENT_TIMESTAMP
		       	,UPDATE_USER = #{SESSION_USER_ID}
		 WHERE COURSE_ID = #{COURSE_ID}   
	</update>
	
	<delete id="axCourseDelete" parameterType="hashMap">
		DELETE FROM COURSE
		 WHERE COURSE_ID = #{COURSE_ID}    
	</delete>

	<select id="axCourseMaxChasu" parameterType="hashmap" resultType="int">
		SELECT 	IFNULL(MAX(CHASU) + 1, 1) CHASU
		FROM 	COURSE
		WHERE 	COURSE_CODE = #{COURSE_CODE} 
	</select>

	<select id="axCourseMasterContents" parameterType="hashmap" resultType="hashmap">
		SELECT 	LEARING_GOAL, LEARING_CONTENT, EVAL_METHOD, LEARING_TARGET, LEARING_COST, OFFLINE_DESC 
		FROM	COURSE_MASTER
		WHERE 	COURSE_CODE = #{COURSE_CODE}
	</select>

	<select id="axCourseContents" parameterType="hashmap" resultType="hashmap">
		SELECT 	LEARING_GOAL, LEARING_CONTENT, EVAL_METHOD, LEARING_TARGET, LEARING_COST, OFFLINE_DESC 
		FROM	COURSE
		WHERE 	COURSE_ID = #{COURSE_ID}
	</select>

	<update id="axCourseContentsUpdate" parameterType="hashMap">
		UPDATE 	COURSE
		SET 	LEARING_GOAL = #{LEARING_GOAL}
		   		,LEARING_CONTENT = #{LEARING_CONTENT}
		   		,EVAL_METHOD = #{EVAL_METHOD}
		   		,LEARING_TARGET = #{LEARING_TARGET}
		   		,LEARING_COST = #{LEARING_COST}
		   		,OFFLINE_DESC = #{OFFLINE_DESC}
		       	,UPDATE_DATE = CURRENT_TIMESTAMP
		       	,UPDATE_USER = #{SESSION_USER_ID}
		WHERE 	COURSE_ID = #{COURSE_ID}   
	</update>

	<select id="axCourseTutorList" parameterType="hashmap" resultType="hashmap">
		SELECT A.*,
		       'N' NEW_FLAG
		  FROM COURSE_TUTOR A
		 WHERE A.COURSE_ID = #{COURSE_ID}
		 ORDER BY A.FROM_CNT
    </select>	

	<insert id="axCourseTutorInsert" parameterType="hashmap">
		INSERT INTO COURSE_TUTOR(COURSE_ID, TUTOR_ID, FROM_CNT, TO_CNT, USE_YN)
		VALUES (#{COURSE_ID}, #{TUTOR_ID}, #{FROM_CNT}, #{TO_CNT}, #{USE_YN})
	</insert>

	<update id="axCourseTutorUpdate" parameterType="hashmap">
		UPDATE COURSE_TUTOR
		   SET FROM_CNT = #{FROM_CNT},
		       TO_CNT = #{TO_CNT},
		       USE_YN = #{USE_YN}
		 WHERE COURSE_ID = #{COURSE_ID}
		   AND TUTOR_ID = #{TUTOR_ID}
	</update>

	<delete id="axCourseTutorDelete" parameterType="hashmap">
		DELETE FROM COURSE_TUTOR
		 WHERE COURSE_ID = #{COURSE_ID}
		   AND TUTOR_ID = #{TUTOR_ID}
	</delete>  
	
	<select id="axCourseUserTutorList" parameterType="hashmap" resultType="hashmap">
		SELECT 	A.*,
				U1.USER_NAME
		FROM 	COURSE_EVAL A
		  			LEFT OUTER JOIN USER U1 ON A.USER_ID = U1.USER_ID
		WHERE 	A.COURSE_ID = #{COURSE_ID}
<if test="TUTOR_ID != null and TUTOR_ID != ''">
		AND		A.TUTOR_ID = #{TUTOR_ID}
</if>
		ORDER 	BY U1.USER_NAME
    </select>	

	<update id="axCourseUserTutorUpdate" parameterType="hashmap">
		UPDATE COURSE_EVAL
		   SET TUTOR_ID = #{TUTOR_ID}
		 WHERE COURSE_ID = #{COURSE_ID}
		   AND USER_ID = #{USER_ID}
	</update>

	<select id="axCoursePostscriptList" parameterType="hashmap" resultType="hashmap">
		SELECT 	A.*,
				U1.USER_NAME,
				DATE_FORMAT(A.CREATE_DATE, '%y.%m.%d %H:%i') LAST_UPDATE_DATE
		FROM 	POSTSCRIPT A
		  			LEFT OUTER JOIN USER U1 ON A.USER_ID = U1.USER_ID
		WHERE 	A.COURSE_ID = #{COURSE_ID}
		ORDER 	BY BEST_YN DESC, CREATE_DATE DESC
    </select>	

	<update id="axCoursePostscriptUpdate" parameterType="hashmap">
		UPDATE POSTSCRIPT
		   SET BEST_YN = #{BEST_YN}
		 WHERE COURSE_ID = #{COURSE_ID}
		   AND USER_ID = #{USER_ID}
	</update>

	<select id="axCourseBestPostscriptCnt" parameterType="hashmap" resultType="int">
		SELECT 	COUNT(*)
		FROM 	POINT
		WHERE 	USER_ID = #{USER_ID}
		AND		POINT_CODE = 'BEST_POSTSCRIPT'
		AND		REF_ID = #{COURSE_ID}
    </select>	

    <insert id="bestPostscriptPointInsert" parameterType="Member">
    	INSERT INTO POINT ( USER_ID, POINT_DATE, VALID_DATE, POINT_CODE, IN_POINT, REF_ID )
	    VALUES ( #{USER_ID}, CURRENT_TIMESTAMP, 
	    			DATE_ADD(CURRENT_TIMESTAMP, INTERVAL (SELECT VALID_MONTH FROM POINT_CODE WHERE POINT_CODE = 'BEST_POSTSCRIPT') MONTH),
	    			'BEST_POSTSCRIPT', 
	    			(SELECT POINT FROM POINT_CODE WHERE POINT_CODE = 'BEST_POSTSCRIPT'), #{COURSE_ID} )
    </insert>

	<update id="axCourseEventPointUpdate" parameterType="hashmap">
		UPDATE 	COURSE
		SET 	EVENT_POINT_FROM = #{EVENT_POINT_FROM}
				,EVENT_POINT_TO = #{EVENT_POINT_TO}
				,EVENT_POINT = #{EVENT_POINT}
				,EVENT_POINT_MONTH = #{EVENT_POINT_MONTH}
		WHERE 	COURSE_ID = #{COURSE_ID}
	</update>


</mapper>