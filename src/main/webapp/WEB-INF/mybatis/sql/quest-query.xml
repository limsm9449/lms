<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="quest">

	<!-- 설문지 그룹 관리 -->

    <select id="questGroupList" parameterType="Quest" resultType="Quest">
	SELECT DATA.* FROM (
		SELECT QG_ID,
		       GROUP_NAME,
		       USE_YN,
		       DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d %H:%i') CREATE_DATE
		  FROM QUEST_GROUP
		 WHERE 1 = 1
	  	   <if test="useYn != null and useYn != ''"> AND USE_YN = #{useYn}</if>
	  	   <if test="groupName != null and groupName != ''"> AND GROUP_NAME LIKE CONCAT('%',#{groupName},'%')</if>	   
		 ORDER BY GROUP_NAME
	 ) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="questGroupTotal" parameterType="Quest" resultType="Quest">
	SELECT COUNT(*) CNT
	  FROM QUEST_GROUP
	 WHERE 1 = 1
  	   <if test="useYn != null and useYn != ''"> AND USE_YN = #{useYn}</if>
  	   <if test="groupName != null and groupName != ''"> AND GROUP_NAME LIKE CONCAT('%',#{groupName},'%')</if>	   
    </select>	

	<select id="questGroupData" parameterType="Quest" resultType="Quest">
	SELECT A.QG_ID,
	       A.GROUP_NAME,
		   A.USE_YN,
		   DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d %H:%i') CREATE_DATE,
           (SELECT COUNT(*) CNT 
              FROM QUEST
             WHERE QG_ID = A.QG_ID) SUB_CNT
	  FROM QUEST_GROUP A
	 WHERE QG_ID = #{qgId} 
	</select>	
	
	<select id="questGroupSubCnt" parameterType="Quest" resultType="Quest">
  	SELECT COUNT(*) CNT 
      FROM QUEST
     WHERE QG_ID = #{qgId} 
	</select>
	
	<select id="questGroupIns" parameterType="Quest">
	INSERT INTO QUEST_GROUP(QG_ID,GROUP_NAME,USE_YN,CREATE_DATE,CREATE_USER)
	VALUES (#{qgId},#{groupName},#{useYn},CURRENT_TIMESTAMP,#{userId})
	</select>

	<select id="questGroupUpd" parameterType="Quest">
	UPDATE QUEST_GROUP
	   SET GROUP_NAME = #{groupName},
	       USE_YN = #{useYn},
	       UPDATE_DATE = CURRENT_TIMESTAMP,
	       UPDATE_USER = #{userId}
	 WHERE QG_ID = #{qgId}
	</select>

	<select id="questGroupDel" parameterType="Quest">
	DELETE FROM QUEST_GROUP
	 WHERE QG_ID = #{qgId}
	</select>

	<select id="questAllDel" parameterType="Quest">
	DELETE FROM QUEST
	 WHERE QG_ID = #{qgId}   
	</select>


	<!-- 설문지 관리 -->

    <select id="questList" parameterType="Quest" resultType="Quest">
	SELECT DATA.* FROM (
		SELECT QG_ID,
		       GROUP_NAME,
		       USE_YN,
		       (SELECT COUNT(*) FROM QUEST WHERE QG_ID = A.QG_ID) CNT,
		       DATE_FORMAT(IFNULL(UPDATE_DATE,CREATE_DATE), '%y.%m.%d %H:%i') CREATE_DATE
		  FROM QUEST_GROUP A
		 WHERE 1 = 1
	  	   <if test="useYn != null and useYn != ''"> AND USE_YN = #{useYn}</if>
	  	   <if test="groupName != null and groupName != ''"> AND GROUP_NAME LIKE CONCAT('%',#{groupName},'%')</if>	   
		 ORDER BY GROUP_NAME
	 ) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="questTotal" parameterType="Quest" resultType="Quest">
	SELECT COUNT(*) CNT
	  FROM QUEST_GROUP
	 WHERE 1 = 1
  	   <if test="useYn != null and useYn != ''"> AND USE_YN = #{useYn}</if>
  	   <if test="groupName != null and groupName != ''"> AND GROUP_NAME LIKE CONCAT('%',#{groupName},'%')</if>	   
    </select>	

	<select id="ddQuestGroupNotInput" resultType="Code">
	SELECT QG_ID DD_KEY,
	       GROUP_NAME DD_VALUE
	  FROM QUEST_GROUP
	 WHERE USE_YN = 'Y'
	   AND QG_ID NOT IN ( SELECT QG_ID FROM QUEST )
	 ORDER BY 2 	
	</select>

	<select id="questDetailList" parameterType="Quest" resultType="Quest">
	SELECT QG_ID, 
	       SEQ,
	       TYPE,
	       QUESTION, 
	       QA1,
	       QA2,
	       QA3,
	       QA4
	  FROM QUEST
	 WHERE QG_ID = #{qgId} 
	</select>

	<select id="questIns" parameterType="Quest">
	INSERT INTO QUEST(QG_ID,SEQ,TYPE,QUESTION,QA1,QA2,QA3,QA4,CREATE_DATE,CREATE_USER)
	VALUES (#{qgId},#{seq},#{type},#{question},#{qa1},#{qa2},#{qa3},#{qa4},CURRENT_TIMESTAMP,#{userId})
	</select>




	<!-- 사용자 Quest  -->
	<select id="userQuestNewList" parameterType="Quest" resultType="Quest">
	SELECT QG_ID, 
	       SEQ,
	       TYPE,
	       QUESTION, 
	       QA1,
	       QA2,
	       QA3,
	       QA4
	  FROM QUEST
	 WHERE QG_ID = (SELECT QG_ID FROM COURSE_CODE WHERE COURSE_CODE = (SELECT COURSE_CODE FROM COURSE WHERE COURSE_ID = #{courseId}) ) 
	</select>
	
	<select id="UserQuestIns" parameterType="Quest">
	INSERT INTO USER_QUEST(COURSE_ID,USER_ID,QG_ID,SEQ,ANSWER,CREATE_DATE,CREATE_USER)
	VALUES (#{courseId},#{userId},#{qgId},#{seq},#{answer},CURRENT_TIMESTAMP,#{userId})
	</select>
		
	<select id="UserQuestInsertFlagUpd" parameterType="Quest">
	UPDATE COURSE_REGISTER
	   SET QUEST_YN = 'Y'
	 WHERE COURSE_ID = #{courseId}
	   AND USER_ID = #{userId}
	</select>
	


	<!-- 강좌별 설문지 통계 -->

    <select id="questManageList" parameterType="Quest" resultType="Quest">
	<![CDATA[
	SELECT DATA.* FROM (
	    SELECT D.CATEGORY_NAME
	           ,A.COURSE_ID
		       ,A.COURSE_CODE
		       ,B.COURSE_NAME
		       ,IFNULL(E.ANSWER1_CNT,0) ANSWER1_CNT
		       ,IFNULL(E.ANSWER2_CNT,0) ANSWER2_CNT
		       ,IFNULL(E.ANSWER3_CNT,0) ANSWER3_CNT
		       ,IFNULL(E.ANSWER4_CNT,0) ANSWER4_CNT
		  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
		                LEFT OUTER JOIN (
							   SELECT C3.CODE C3_CODE,
								  C2.CODE C2_CODE,
								  C1.CODE C1_CODE,
								  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
								 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
									      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
							    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
					    LEFT OUTER JOIN (
					    	SELECT COURSE_ID,
							       SUM(IF(ANSWER = '1',1,0)) ANSWER1_CNT,
							       SUM(IF(ANSWER = '2',1,0)) ANSWER2_CNT,
							       SUM(IF(ANSWER = '3',1,0)) ANSWER3_CNT,
							       SUM(IF(ANSWER = '4',1,0)) ANSWER4_CNT
							  FROM USER_QUEST 
							 GROUP BY COURSE_ID ) E ON E.COURSE_ID = A.COURSE_ID
		 WHERE A.COURSE_KIND IN ('NORMAL','COMPANY')
	]]>
		   <if test="c1Code != null and c1Code != ''"> AND D.C1_CODE = #{c1Code}</if>
		   <if test="c2Code != null and c2Code != ''"> AND D.C2_CODE = #{c2Code}</if>
		   <if test="c3Code != null and c3Code != ''"> AND D.C3_CODE = #{c3Code}</if>
		   <if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>
	 ORDER BY D.CATEGORY_NAME,B.COURSE_NAME,A.CHASU DESC  
	) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="questManageTotal" parameterType="Quest" resultType="Quest">
	<![CDATA[
    SELECT COUNT(*) CNT
	  FROM COURSE A LEFT OUTER JOIN COURSE_CODE B ON A.COURSE_CODE = B.COURSE_CODE
	                LEFT OUTER JOIN (
						   SELECT C3.CODE C3_CODE,
							  C2.CODE C2_CODE,
							  C1.CODE C1_CODE,
							  CONCAT(C1.CODE_NAME,' > ',C2.CODE_NAME,' > ',C3.CODE_NAME) CATEGORY_NAME
							 FROM CATEGORY C3 LEFT OUTER JOIN CATEGORY C2 ON C3.PARENT_CODE = C2.CODE
								      LEFT OUTER JOIN CATEGORY C1 ON C2.PARENT_CODE = C1.CODE
						    WHERE C3.DEPTH = 3) D ON B.CODE = D.C3_CODE
	 WHERE A.COURSE_KIND IN ('NORMAL','COMPANY')
	]]>
	   <if test="c1Code != null and c1Code != ''"> AND D.C1_CODE = #{c1Code}</if>
	   <if test="c2Code != null and c2Code != ''"> AND D.C2_CODE = #{c2Code}</if>
	   <if test="c3Code != null and c3Code != ''"> AND D.C3_CODE = #{c3Code}</if>
	   <if test="courseName != null and courseName != ''"> AND B.COURSE_NAME LIKE CONCAT('%',#{courseName},'%')</if>   
    </select>	
	
    <select id="questUserManageList" parameterType="Quest" resultType="Quest">
	SELECT DATA.* FROM (
	    SELECT A.USER_ID
	           ,B.USER_NAME
		       ,B.EMAIL
		       ,B.MOBILE
		       ,IFNULL(E.ANSWER1_CNT,0) ANSWER1_CNT
		       ,IFNULL(E.ANSWER2_CNT,0) ANSWER2_CNT
		       ,IFNULL(E.ANSWER3_CNT,0) ANSWER3_CNT
		       ,IFNULL(E.ANSWER4_CNT,0) ANSWER4_CNT
	       	   ,A.QUEST_YN
		  FROM COURSE_REGISTER A LEFT OUTER JOIN USER B ON A.USER_ID = B.USER_ID
					             LEFT OUTER JOIN (
							    	SELECT COURSE_ID,
							    	       USER_ID,
									       SUM(IF(ANSWER = '1',1,0)) ANSWER1_CNT,
									       SUM(IF(ANSWER = '2',1,0)) ANSWER2_CNT,
									       SUM(IF(ANSWER = '3',1,0)) ANSWER3_CNT,
									       SUM(IF(ANSWER = '4',1,0)) ANSWER4_CNT
									  FROM USER_QUEST 
									 GROUP BY COURSE_ID,USER_ID ) E ON E.COURSE_ID = A.COURSE_ID AND E.USER_ID = A.USER_ID
		 WHERE A.COURSE_ID = #{courseId}
	       <if test="searchStr != null and searchStr != ''">
		     <if test="searchKind == 'USER_ID'">
		       AND UPPER(A.USER_ID) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
		     </if>
		     <if test="searchKind == 'USER_NAME'">
		       AND UPPER(B.USER_NAME) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
		     </if>
	       </if>			 
	 	ORDER BY B.USER_NAME
	) DATA LIMIT #{limitStart},#{limitUnit}
    </select>	

    <select id="questUserManageTotal" parameterType="Quest" resultType="Quest">
    SELECT COUNT(*) CNT
	  FROM COURSE_REGISTER A LEFT OUTER JOIN USER B ON A.USER_ID = B.USER_ID
					             LEFT OUTER JOIN (
							    	SELECT COURSE_ID,
							    	       USER_ID,
									       SUM(IF(ANSWER = '1',1,0)) ANSWER1_CNT,
									       SUM(IF(ANSWER = '2',1,0)) ANSWER2_CNT,
									       SUM(IF(ANSWER = '3',1,0)) ANSWER3_CNT,
									       SUM(IF(ANSWER = '4',1,0)) ANSWER4_CNT
									  FROM USER_QUEST 
									 GROUP BY COURSE_ID,USER_ID ) E ON E.COURSE_ID = A.COURSE_ID AND E.USER_ID = A.USER_ID
	 WHERE A.COURSE_ID = #{courseId}
       <if test="searchStr != null and searchStr != ''">
	     <if test="searchKind == 'USER_ID'">
	       AND UPPER(A.USER_ID) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
	     </if>
	     <if test="searchKind == 'USER_NAME'">
	       AND UPPER(B.USER_NAME) LIKE CONCAT('%',UPPER(#{searchStr}),'%') 
	     </if>
       </if>
    </select>	

    <select id="questUserManageData" parameterType="Quest" resultType="Quest">
	SELECT B.SEQ,
	       B.QUESTION,
	       B.TYPE,
	       IF(B.TYPE = 'J',A.ANSWER,
	         IF(A.ANSWER = '1',B.QA1,
	           IF(A.ANSWER = '2',B.QA2,
	             IF(A.ANSWER = '3',B.QA3,
	               IF(A.ANSWER = '4',B.QA4,'')
	             )
	           )
	         )
	       ) ANSWER
	  FROM USER_QUEST A LEFT OUTER JOIN QUEST B ON B.QG_ID = A.QG_ID AND B.SEQ = A.SEQ
	 WHERE A.COURSE_ID = #{courseId}
	   AND A.USER_ID = #{userId}
    </select>	
            
</mapper>